{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate } from 'tslib';\nimport { ViewChild, Input, Component, forwardRef, EventEmitter, ElementRef, Renderer2, Output, HostListener, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlContainer, NgControl } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport 'flatpickr';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\nvar _c0 = [\"flatpickr\"];\n\nfunction Ng2FlatpickrComponent_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"input\", 3);\n    ɵngcc0.ɵɵlistener(\"focus\", function Ng2FlatpickrComponent_input_2_Template_input_focus_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onFocus($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"ng2-flatpickr-input \", ctx_r1.addClass, \"\");\n    ɵngcc0.ɵɵproperty(\"placeholder\", ctx_r1.placeholder)(\"tabindex\", ctx_r1.tabindex);\n  }\n}\n\nvar _c1 = [\"*\"];\nvar Ng2FlatpickrComponent_1;\n\nif (typeof window !== 'undefined') {\n  require('flatpickr');\n}\n\nvar Ng2FlatpickrComponent = /*@__PURE__*/function () {\n  var Ng2FlatpickrComponent = Ng2FlatpickrComponent_1 = /*#__PURE__*/function () {\n    function Ng2FlatpickrComponent() {\n      var _this = this;\n\n      _classCallCheck(this, Ng2FlatpickrComponent);\n\n      this._tabindex = 0;\n\n      this.onTouchedFn = function () {};\n\n      this.defaultFlatpickrOptions = {\n        wrap: true,\n        clickOpens: true,\n        onChange: function onChange(selectedDates) {\n          _this.writeValue(selectedDates);\n        }\n      };\n      this.placeholder = \"\";\n      this.addClass = \"\";\n      this.hideButton = false;\n\n      this.propagateChange = function (_) {};\n    }\n\n    _createClass(Ng2FlatpickrComponent, [{\n      key: \"tabindex\",\n      get: function get() {\n        return this._tabindex;\n      },\n      set: function set(ti) {\n        this._tabindex = Number(ti);\n      } ///////////////////////////////////\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.propagateChange(value);\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.propagateChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouchedFn = fn;\n      } ///////////////////////////////////\n\n    }, {\n      key: \"setDateFromInput\",\n      value: function setDateFromInput(date) {\n        this.flatpickrElement.nativeElement._flatpickr.setDate(date, true);\n      }\n    }, {\n      key: \"setAltInputPlaceholder\",\n      value: function setAltInputPlaceholder(placeholder) {\n        this.flatpickrElement.nativeElement._flatpickr.altInput.setAttribute('placeholder', placeholder);\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (this.config) {\n          Object.assign(this.defaultFlatpickrOptions, this.config);\n        }\n\n        if (this.flatpickrElement.nativeElement.flatpickr) {\n          this.flatpickr = this.flatpickrElement.nativeElement.flatpickr(this.defaultFlatpickrOptions);\n        }\n\n        if (this.setDate) {\n          this.setDateFromInput(this.setDate);\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (this.flatpickrElement.nativeElement && this.flatpickrElement.nativeElement._flatpickr) {\n          if (changes.hasOwnProperty('setDate') && changes['setDate'].currentValue) {\n            this.setDateFromInput(changes['setDate'].currentValue);\n          }\n\n          if (this.config.altInput && changes.hasOwnProperty('placeholder') && changes['placeholder'].currentValue) {\n            this.setAltInputPlaceholder(changes['placeholder'].currentValue);\n          }\n        }\n      }\n    }, {\n      key: \"onFocus\",\n      value: function onFocus(event) {\n        this.onTouchedFn();\n      }\n    }]);\n\n    return Ng2FlatpickrComponent;\n  }();\n\n  Ng2FlatpickrComponent.ɵfac = function Ng2FlatpickrComponent_Factory(t) {\n    return new (t || Ng2FlatpickrComponent)();\n  };\n\n  Ng2FlatpickrComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Ng2FlatpickrComponent,\n    selectors: [[\"ng2-flatpickr\"]],\n    viewQuery: function Ng2FlatpickrComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.flatpickrElement = _t.first);\n      }\n    },\n    inputs: {\n      placeholder: \"placeholder\",\n      addClass: \"addClass\",\n      hideButton: \"hideButton\",\n      tabindex: \"tabindex\",\n      config: \"config\",\n      setDate: \"setDate\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return Ng2FlatpickrComponent_1;\n      }),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"ng2-flatpickr-input-container\"], [\"flatpickr\", \"\"], [\"type\", \"text\", \"data-input\", \"\", 3, \"class\", \"placeholder\", \"tabindex\", \"focus\", 4, \"ngIf\"], [\"type\", \"text\", \"data-input\", \"\", 3, \"placeholder\", \"tabindex\", \"focus\"]],\n    template: function Ng2FlatpickrComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵtemplate(2, Ng2FlatpickrComponent_input_2_Template, 1, 5, \"input\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hideButton);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  return Ng2FlatpickrComponent;\n}();\n\nvar Ng2FlatpickrDirective = /*@__PURE__*/function () {\n  var Ng2FlatpickrDirective = /*#__PURE__*/function () {\n    function Ng2FlatpickrDirective(parent, ngControl, element, renderer) {\n      _classCallCheck(this, Ng2FlatpickrDirective);\n\n      this.parent = parent;\n      this.ngControl = ngControl;\n      this.element = element;\n      this.renderer = renderer;\n      /**\n       * onChange gets triggered when the user selects a date, or changes the time on a selected date.\n       *\n       * Default:  null\n       */\n\n      this.flatpickrOnChange = new EventEmitter();\n      /**\n       * onClose gets triggered when the calendar is closed.\n       *\n       * Default:  null\n       */\n\n      this.flatpickrOnClose = new EventEmitter();\n      /**\n       * onOpen gets triggered when the calendar is opened.\n       *\n       * Default:  null\n       */\n\n      this.flatpickrOnOpen = new EventEmitter();\n      /**\n       * onReady gets triggered once the calendar is in a ready state.\n       *\n       * Default:  null\n       */\n\n      this.flatpickrOnReady = new EventEmitter();\n    }\n    /** Allow double-clicking on the control to open/close it. */\n\n\n    _createClass(Ng2FlatpickrDirective, [{\n      key: \"onClick\",\n      value: function onClick() {\n        this.flatpickr.toggle();\n      }\n    }, {\n      key: \"control\",\n      get: function get() {\n        return this.parent ? this.parent.formDirective.getControl(this.ngControl) : null;\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        /** We cannot initialize the flatpickr instance in ngOnInit(); it will\n            randomize the date when the form control initializes. */\n        var nativeElement = this.element.nativeElement;\n\n        if (typeof nativeElement === 'undefined' || nativeElement === null) {\n          throw 'Error: invalid input element specified';\n        }\n\n        if (this.flatpickrOptions.wrap) {\n          this.renderer.setAttribute(this.element.nativeElement, 'data-input', '');\n          nativeElement = nativeElement.parentNode;\n        }\n\n        this.flatpickr = nativeElement.flatpickr(this.flatpickrOptions);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (this.flatpickr && this.flatpickrAltInput && changes.hasOwnProperty('placeholder') && changes['placeholder'].currentValue) {\n          this.flatpickr.altInput.setAttribute('placeholder', changes['placeholder'].currentValue);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.flatpickr) {\n          this.flatpickr.destroy();\n        }\n\n        if (this.formControlListener) {\n          this.formControlListener.unsubscribe();\n          this.formControlListener = undefined;\n        }\n\n        this.flatpickrOnChange = undefined;\n        this.flatpickrOnClose = undefined;\n        this.flatpickrOnOpen = undefined;\n        this.flatpickrOnReady = undefined;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        this.globalOnChange = this.flatpickrOptions.onChange;\n        this.globalOnClose = this.flatpickrOptions.onClose;\n        this.globalOnOpen = this.flatpickrOptions.onOpen;\n        this.globalOnReady = this.flatpickrOptions.onReady;\n        this.flatpickrOptions = {\n          altFormat: this.getOption('altFormat'),\n          altInput: this.getOption('altInput'),\n          altInputClass: this.getOption('altInputClass'),\n          allowInput: this.getOption('allowInput'),\n          appendTo: this.getOption('appendTo'),\n          clickOpens: this.getOption('clickOpens', true),\n          dateFormat: this.getOption('dateFormat'),\n          defaultDate: this.getOption('defaultDate'),\n          disable: this.getOption('disable'),\n          disableMobile: this.getOption('disableMobile'),\n          enable: this.getOption('enable'),\n          enableTime: this.getOption('enableTime'),\n          enableSeconds: this.getOption('enableSeconds'),\n          hourIncrement: this.getOption('hourIncrement'),\n          inline: this.getOption('inline'),\n          locale: this.getOption('locale'),\n          maxDate: this.getOption('maxDate'),\n          minDate: this.getOption('minDate'),\n          minuteIncrement: this.getOption('minuteIncrement'),\n          mode: this.getOption('mode'),\n          nextArrow: this.getOption('nextArrow'),\n          noCalendar: this.getOption('noCalendar'),\n          onChange: this.eventOnChange.bind(this),\n          onClose: this.eventOnClose.bind(this),\n          onOpen: this.eventOnOpen.bind(this),\n          onReady: this.eventOnReady.bind(this),\n          parseDate: this.getOption('parseDate'),\n          prevArrow: this.getOption('prevArrow'),\n          shorthandCurrentMonth: this.getOption('shorthandCurrentMonth'),\n          static: this.getOption('static'),\n          time_24hr: this.getOption('time_24hr'),\n          utc: this.getOption('utc'),\n          weekNumbers: this.getOption('weekNumbers'),\n          wrap: this.getOption('wrap', true)\n        }; // Remove unset properties\n\n        Object.keys(this.flatpickrOptions).forEach(function (key) {\n          _this2.flatpickrOptions[key] === undefined && delete _this2.flatpickrOptions[key];\n        });\n\n        if (this.control) {\n          this.formControlListener = this.control.valueChanges.subscribe(function (value) {\n            if (!(value instanceof Date)) {\n              // Quietly update the value of the form control to be a\n              // Date object. This avoids any external subscribers\n              // from being notified a second time (once for the user\n              // initiated event, and once for our conversion to\n              // Date()).\n              _this2.control.setValue(new Date('' + value), {\n                onlySelf: true,\n                emitEvent: false,\n                emitModelToViewChange: false,\n                emitViewToModelChange: false\n              });\n            }\n          });\n        }\n      }\n      /**\n       * Fire off the event emitter for the directive element, and also for the\n       * global onChange callback, if defined.\n       */\n\n    }, {\n      key: \"eventOnChange\",\n      value: function eventOnChange(selectedDates, dateStr, instance) {\n        var event = {\n          selectedDates: selectedDates,\n          dateStr: dateStr,\n          instance: instance\n        };\n\n        if (this.flatpickrOnChange) {\n          this.flatpickrOnChange.emit(event);\n        }\n\n        if (this.globalOnChange) {\n          this.globalOnChange(event);\n        }\n      }\n      /**\n       * Fire off the event emitter for the directive element, and also for the\n       * global onClose callback, if defined.\n       */\n\n    }, {\n      key: \"eventOnClose\",\n      value: function eventOnClose(selectedDates, dateStr, instance) {\n        var event = {\n          selectedDates: selectedDates,\n          dateStr: dateStr,\n          instance: instance\n        };\n\n        if (this.flatpickrOnClose) {\n          this.flatpickrOnClose.emit(event);\n        }\n\n        if (this.globalOnClose) {\n          this.globalOnClose(event);\n        }\n      }\n      /**\n       * Fire off the event emitter for the directive element, and also for the\n       * global onOpen callback, if defined.\n       */\n\n    }, {\n      key: \"eventOnOpen\",\n      value: function eventOnOpen(selectedDates, dateStr, instance) {\n        var event = {\n          selectedDates: selectedDates,\n          dateStr: dateStr,\n          instance: instance\n        };\n\n        if (this.flatpickrOnOpen) {\n          this.flatpickrOnOpen.emit(event);\n        }\n\n        if (this.globalOnOpen) {\n          this.globalOnOpen(event);\n        }\n      }\n      /**\n       * Fire off the event emitter for the directive element, and also for the\n       * global onReady callback, if defined.\n       */\n\n    }, {\n      key: \"eventOnReady\",\n      value: function eventOnReady(selectedDates, dateStr, instance) {\n        var event = {\n          selectedDates: selectedDates,\n          dateStr: dateStr,\n          instance: instance\n        };\n\n        if (this.flatpickrOnReady) {\n          this.flatpickrOnReady.emit(event);\n        }\n\n        if (this.globalOnReady) {\n          this.globalOnReady(event);\n        }\n      }\n      /**\n       * Return the configuration value for option {option}, or {defaultValue} if it\n       * doesn't exist.\n       */\n\n    }, {\n      key: \"getOption\",\n      value: function getOption(option, defaultValue) {\n        var localName = 'flatpickr' + option.substring(0, 1).toUpperCase() + option.substring(1);\n\n        if (typeof this[localName] !== 'undefined') {\n          return this[localName];\n        } else if (typeof this.flatpickrOptions[option] !== 'undefined') {\n          return this.flatpickrOptions[option];\n        } else {\n          return defaultValue;\n        }\n      }\n    }]);\n\n    return Ng2FlatpickrDirective;\n  }();\n\n  Ng2FlatpickrDirective.ɵfac = function Ng2FlatpickrDirective_Factory(t) {\n    return new (t || Ng2FlatpickrDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ControlContainer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  Ng2FlatpickrDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: Ng2FlatpickrDirective,\n    selectors: [[\"\", \"flatpickr\", \"\"]],\n    hostBindings: function Ng2FlatpickrDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"dblclick\", function Ng2FlatpickrDirective_dblclick_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      flatpickrOptions: [\"flatpickr\", \"flatpickrOptions\"],\n      placeholder: \"placeholder\",\n      flatpickrAltFormat: [\"altFormat\", \"flatpickrAltFormat\"],\n      flatpickrAltInput: [\"altInput\", \"flatpickrAltInput\"],\n      flatpickrAltInputClass: [\"altInputClass\", \"flatpickrAltInputClass\"],\n      flatpickrAllowInput: [\"allowInput\", \"flatpickrAllowInput\"],\n      flatpickrAppendTo: [\"appendTo\", \"flatpickrAppendTo\"],\n      flatpickrClickOpens: [\"clickOpens\", \"flatpickrClickOpens\"],\n      flatpickrDateFormat: [\"dateFormat\", \"flatpickrDateFormat\"],\n      flatpickrDefaultDate: [\"defaultDate\", \"flatpickrDefaultDate\"],\n      flatpickrDisable: [\"disable\", \"flatpickrDisable\"],\n      flatpickrDisableMobile: [\"disableMobile\", \"flatpickrDisableMobile\"],\n      flatpickrEnable: [\"enable\", \"flatpickrEnable\"],\n      flatpickrEnableTime: [\"enableTime\", \"flatpickrEnableTime\"],\n      flatpickrEnableSeconds: [\"enableSeconds\", \"flatpickrEnableSeconds\"],\n      flatpickrHourIncrement: [\"hourIncrement\", \"flatpickrHourIncrement\"],\n      flatpickrInline: [\"inline\", \"flatpickrInline\"],\n      flatpickrLocale: [\"locale\", \"flatpickrLocale\"],\n      flatpickrMaxDate: [\"maxDate\", \"flatpickrMaxDate\"],\n      flatpickrMinDate: [\"minDate\", \"flatpickrMinDate\"],\n      flatpickrMinuteIncrement: [\"minuteIncrement\", \"flatpickrMinuteIncrement\"],\n      flatpickrMode: [\"mode\", \"flatpickrMode\"],\n      flatpickrNextArrow: [\"nextArrow\", \"flatpickrNextArrow\"],\n      flatpickrNoCalendar: [\"noCalendar\", \"flatpickrNoCalendar\"],\n      flatpickrParseDate: [\"parseDate\", \"flatpickrParseDate\"],\n      flatpickrPrevArrow: [\"prevArrow\", \"flatpickrPrevArrow\"],\n      flatpickrShorthandCurrentMonth: [\"shorthandCurrentMonth\", \"flatpickrShorthandCurrentMonth\"],\n      flatpickrStatic: [\"static\", \"flatpickrStatic\"],\n      flatpickrTime_24hr: [\"time_24hr\", \"flatpickrTime_24hr\"],\n      flatpickrUtc: [\"utc\", \"flatpickrUtc\"],\n      flatpickrWeekNumbers: [\"weekNumbers\", \"flatpickrWeekNumbers\"],\n      flatpickrWrap: [\"wrap\", \"flatpickrWrap\"]\n    },\n    outputs: {\n      flatpickrOnChange: \"onChange\",\n      flatpickrOnClose: \"onClose\",\n      flatpickrOnOpen: \"onOpen\",\n      flatpickrOnReady: \"onReady\"\n    },\n    exportAs: [\"ng2-flatpickr\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return Ng2FlatpickrDirective;\n}();\n\nvar Ng2FlatpickrModule = /*@__PURE__*/function () {\n  var Ng2FlatpickrModule = function Ng2FlatpickrModule() {\n    _classCallCheck(this, Ng2FlatpickrModule);\n  };\n\n  Ng2FlatpickrModule.ɵfac = function Ng2FlatpickrModule_Factory(t) {\n    return new (t || Ng2FlatpickrModule)();\n  };\n\n  Ng2FlatpickrModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: Ng2FlatpickrModule\n  });\n  Ng2FlatpickrModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return Ng2FlatpickrModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2FlatpickrModule, {\n    declarations: function declarations() {\n      return [Ng2FlatpickrComponent, Ng2FlatpickrDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [Ng2FlatpickrComponent, Ng2FlatpickrDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Ng2FlatpickrComponent, Ng2FlatpickrDirective, Ng2FlatpickrModule }; //# sourceMappingURL=ng2-flatpickr.js.map","map":null,"metadata":{},"sourceType":"module"}