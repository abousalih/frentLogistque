{"ast":null,"code":"import _get from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport var ConnectableObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(ConnectableObservable, _Observable);\n\n  var _super = _createSuper(ConnectableObservable);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this;\n\n    _classCallCheck(this, ConnectableObservable);\n\n    _this = _super.call(this);\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  _createClass(ConnectableObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      return this.getSubject().subscribe(subscriber);\n    }\n  }, {\n    key: \"getSubject\",\n    value: function getSubject() {\n      var subject = this._subject;\n\n      if (!subject || subject.isStopped) {\n        this._subject = this.subjectFactory();\n      }\n\n      return this._subject;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var connection = this._connection;\n\n      if (!connection) {\n        this._isComplete = false;\n        connection = this._connection = new Subscription();\n        connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n        if (connection.closed) {\n          this._connection = null;\n          connection = Subscription.EMPTY;\n        }\n      }\n\n      return connection;\n    }\n  }, {\n    key: \"refCount\",\n    value: function refCount() {\n      return higherOrderRefCount()(this);\n    }\n  }]);\n\n  return ConnectableObservable;\n}(Observable);\nexport var connectableObservableDescriptor = function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\n\nvar ConnectableSubscriber = /*#__PURE__*/function (_SubjectSubscriber) {\n  _inherits(ConnectableSubscriber, _SubjectSubscriber);\n\n  var _super2 = _createSuper(ConnectableSubscriber);\n\n  function ConnectableSubscriber(destination, connectable) {\n    var _this2;\n\n    _classCallCheck(this, ConnectableSubscriber);\n\n    _this2 = _super2.call(this, destination);\n    _this2.connectable = connectable;\n    return _this2;\n  }\n\n  _createClass(ConnectableSubscriber, [{\n    key: \"_error\",\n    value: function _error(err) {\n      this._unsubscribe();\n\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.connectable._isComplete = true;\n\n      this._unsubscribe();\n\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n\n      if (connectable) {\n        this.connectable = null;\n        var connection = connectable._connection;\n        connectable._refCount = 0;\n        connectable._subject = null;\n        connectable._connection = null;\n\n        if (connection) {\n          connection.unsubscribe();\n        }\n      }\n    }\n  }]);\n\n  return ConnectableSubscriber;\n}(SubjectSubscriber);\n\nvar RefCountOperator = /*#__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    _classCallCheck(this, RefCountOperator);\n\n    this.connectable = connectable;\n  }\n\n  _createClass(RefCountOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var connectable = this.connectable;\n      connectable._refCount++;\n      var refCounter = new RefCountSubscriber(subscriber, connectable);\n      var subscription = source.subscribe(refCounter);\n\n      if (!refCounter.closed) {\n        refCounter.connection = connectable.connect();\n      }\n\n      return subscription;\n    }\n  }]);\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(RefCountSubscriber, _Subscriber);\n\n  var _super3 = _createSuper(RefCountSubscriber);\n\n  function RefCountSubscriber(destination, connectable) {\n    var _this3;\n\n    _classCallCheck(this, RefCountSubscriber);\n\n    _this3 = _super3.call(this, destination);\n    _this3.connectable = connectable;\n    return _this3;\n  }\n\n  _createClass(RefCountSubscriber, [{\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n\n      if (!connectable) {\n        this.connection = null;\n        return;\n      }\n\n      this.connectable = null;\n      var refCount = connectable._refCount;\n\n      if (refCount <= 0) {\n        this.connection = null;\n        return;\n      }\n\n      connectable._refCount = refCount - 1;\n\n      if (refCount > 1) {\n        this.connection = null;\n        return;\n      }\n\n      var connection = this.connection;\n      var sharedConnection = connectable._connection;\n      this.connection = null;\n\n      if (sharedConnection && (!connection || sharedConnection === connection)) {\n        sharedConnection.unsubscribe();\n      }\n    }\n  }]);\n\n  return RefCountSubscriber;\n}(Subscriber); //# sourceMappingURL=ConnectableObservable.js.map","map":{"version":3,"sources":["/Users/mac/Apps/sr-manager/web/node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js"],"names":["SubjectSubscriber","Observable","Subscriber","Subscription","refCount","higherOrderRefCount","ConnectableObservable","source","subjectFactory","_refCount","_isComplete","subscriber","getSubject","subscribe","subject","_subject","isStopped","connection","_connection","add","ConnectableSubscriber","closed","EMPTY","connectableObservableDescriptor","connectableProto","prototype","operator","value","writable","_subscribe","connect","destination","connectable","err","_unsubscribe","unsubscribe","RefCountOperator","refCounter","RefCountSubscriber","subscription","sharedConnection"],"mappings":"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","sourcesContent":["import {SubjectSubscriber} from '../Subject';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {refCount as higherOrderRefCount} from '../operators/refCount';\n\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\n\nexport const connectableObservableDescriptor = (() => {\n    const connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: {value: null},\n        _refCount: {value: 0, writable: true},\n        _subject: {value: null, writable: true},\n        _connection: {value: null, writable: true},\n        _subscribe: {value: connectableProto._subscribe},\n        _isComplete: {value: connectableProto._isComplete, writable: true},\n        getSubject: {value: connectableProto.getSubject},\n        connect: {value: connectableProto.connect},\n        refCount: {value: connectableProto.refCount}\n    };\n})();\n\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\n\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n\n    call(subscriber, source) {\n        const {connectable} = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\n\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n\n    _unsubscribe() {\n        const {connectable} = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const {connection} = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n\n//# sourceMappingURL=ConnectableObservable.js.map\n"]},"metadata":{},"sourceType":"module"}