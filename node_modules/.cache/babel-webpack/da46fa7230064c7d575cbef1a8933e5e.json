{"ast":null,"code":"import _toConsumableArray from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __decorate } from 'tslib';\nimport { Injectable, Input, Component, ViewEncapsulation, TemplateRef, ComponentRef, ComponentFactoryResolver, ChangeDetectorRef, ViewChild, ViewContainerRef, Renderer2, Directive, InjectionToken, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReplaySubject } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"*\"];\nvar _c1 = [\"templateOutlet\"];\n\nfunction BlockUIContentComponent_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r2.message || ctx_r2.defaultMessage, \" \");\n  }\n}\n\nfunction BlockUIContentComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵtemplate(2, BlockUIContentComponent_div_1_div_2_Template, 2, 1, \"div\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.message || ctx_r0.defaultMessage);\n  }\n}\n\nfunction BlockUIContentComponent_2_ng_template_0_Template(rf, ctx) {}\n\nfunction BlockUIContentComponent_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, BlockUIContentComponent_2_ng_template_0_Template, 0, 0, \"ng-template\", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);\n  }\n}\n\nvar _c2 = function _c2(a0) {\n  return {\n    \"active\": a0\n  };\n};\n\nvar BlockUIActions = /*@__PURE__*/function () {\n  var BlockUIActions = function BlockUIActions() {\n    _classCallCheck(this, BlockUIActions);\n  };\n\n  BlockUIActions.START = 'start';\n  BlockUIActions.STOP = 'stop';\n  BlockUIActions.UPDATE = 'update';\n  BlockUIActions.RESET = 'reset';\n  BlockUIActions.RESET_GLOBAL = 'reset_global';\n  BlockUIActions.UNSUBSCRIBE = 'unsubscribe';\n  return BlockUIActions;\n}();\n\nvar BlockUIDefaultName = 'block-ui-main';\n\nvar BlockUIInstanceService = /*@__PURE__*/function () {\n  var BlockUIInstanceService = /*#__PURE__*/function () {\n    function BlockUIInstanceService() {\n      _classCallCheck(this, BlockUIInstanceService);\n\n      this.blockUISettings = {};\n      this.blockUIInstances = {};\n      this.blockUISubject = new ReplaySubject(1);\n      this.blockUIObservable = this.blockUISubject.asObservable();\n      this.blockUIObservable.subscribe(this.blockUIMiddleware.bind(this));\n    }\n\n    _createClass(BlockUIInstanceService, [{\n      key: \"getSettings\",\n      value: function getSettings() {\n        return this.blockUISettings;\n      }\n    }, {\n      key: \"updateSettings\",\n      value: function updateSettings() {\n        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        this.blockUISettings = Object.assign(Object.assign({}, this.blockUISettings), settings);\n      }\n    }, {\n      key: \"decorate\",\n      value: function decorate() {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BlockUIDefaultName;\n        var blockUI = {\n          name: name,\n          isActive: false,\n          blockCount: 0,\n          start: this.dispatch(this.blockUISubject, BlockUIActions.START, name),\n          update: this.dispatch(this.blockUISubject, BlockUIActions.UPDATE, name),\n          stop: this.dispatch(this.blockUISubject, BlockUIActions.STOP, name),\n          reset: this.dispatch(this.blockUISubject, BlockUIActions.RESET, name),\n          resetGlobal: this.dispatch(this.blockUISubject, BlockUIActions.RESET_GLOBAL, name),\n          unsubscribe: this.dispatch(this.blockUISubject, BlockUIActions.UNSUBSCRIBE, name)\n        };\n        this.blockUIInstances[name] = this.blockUIInstances[name] || blockUI;\n        return blockUI;\n      }\n    }, {\n      key: \"observe\",\n      value: function observe() {\n        return this.blockUIObservable;\n      }\n    }, {\n      key: \"clearInstance\",\n      value: function clearInstance(instanceName) {\n        this.dispatch(this.blockUISubject, BlockUIActions.RESET, instanceName);\n      }\n    }, {\n      key: \"blockUIMiddleware\",\n      value: function blockUIMiddleware(_ref) {\n        var action = _ref.action,\n            name = _ref.name;\n        var isActive = null;\n\n        switch (action) {\n          case BlockUIActions.START:\n            isActive = true;\n            break;\n\n          case BlockUIActions.STOP:\n          case BlockUIActions.RESET:\n            isActive = false;\n            break;\n        }\n\n        if (isActive !== null) {\n          this.blockUIInstances[name].isActive = isActive;\n        }\n      }\n    }, {\n      key: \"dispatch\",\n      value: function dispatch(subject, action) {\n        var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BlockUIDefaultName;\n        return function (message) {\n          subject.next({\n            name: name,\n            action: action,\n            message: message\n          });\n        };\n      }\n    }]);\n\n    return BlockUIInstanceService;\n  }();\n\n  BlockUIInstanceService.ɵfac = function BlockUIInstanceService_Factory(t) {\n    return new (t || BlockUIInstanceService)();\n  };\n\n  BlockUIInstanceService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BlockUIInstanceService,\n    factory: function factory(t) {\n      return BlockUIInstanceService.ɵfac(t);\n    }\n  });\n  return BlockUIInstanceService;\n}();\n\nvar BlockUIComponent = /*@__PURE__*/function () {\n  var BlockUIComponent = /*#__PURE__*/function () {\n    function BlockUIComponent(blockUI) {\n      _classCallCheck(this, BlockUIComponent);\n\n      this.blockUI = blockUI;\n    }\n\n    _createClass(BlockUIComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.name = this.name || BlockUIDefaultName;\n        this.template = this.template || this.blockUI.blockUISettings.template;\n      }\n    }]);\n\n    return BlockUIComponent;\n  }();\n\n  BlockUIComponent.ɵfac = function BlockUIComponent_Factory(t) {\n    return new (t || BlockUIComponent)(ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService));\n  };\n\n  BlockUIComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BlockUIComponent,\n    selectors: [[\"block-ui\"]],\n    inputs: {\n      name: \"name\",\n      template: \"template\",\n      message: \"message\",\n      delayStart: \"delayStart\",\n      delayStop: \"delayStop\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 5,\n    consts: [[3, \"name\", \"message\", \"template\", \"delayStart\", \"delayStop\"]],\n    template: function BlockUIComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"block-ui-content\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"name\", ctx.name)(\"message\", ctx.message)(\"template\", ctx.template)(\"delayStart\", ctx.delayStart)(\"delayStop\", ctx.delayStop);\n      }\n    },\n    directives: function directives() {\n      return [BlockUIContentComponent];\n    },\n    encapsulation: 2\n  });\n  return BlockUIComponent;\n}(); // Spinner style - https://github.com/lukehaas/css-loaders\n\n\nvar styles = \"\\n.block-ui-wrapper {\\n  display: none;\\n  position: fixed;\\n  height: 100%;\\n  width: 100%;\\n  top: 0;\\n  left: 0;\\n  background: rgba(0, 0, 0, 0.70);\\n  z-index: 30000;\\n  cursor: wait;\\n}\\n\\n.block-ui-wrapper.block-ui-wrapper--element {\\n  position: absolute;\\n}\\n\\n.block-ui-wrapper.active {\\n  display: block;\\n}\\n\\n.block-ui-wrapper.block-ui-main {\\n  position: fixed;\\n}\\n\\n.block-ui-spinner,\\n.block-ui-template {\\n  position: absolute;\\n  top: 40%;\\n  margin: 0 auto;\\n  left: 0;\\n  right: 0;\\n  transform: translateY(-50%);\\n}\\n\\n.block-ui-spinner > .message {\\n  font-size: 1.3em;\\n  text-align: center;\\n  color: #fff;\\n}\\n\\n.block-ui__element {\\n  position: relative;\\n}\\n\\n.loader,\\n.loader:after {\\n  border-radius: 50%;\\n  width: 10em;\\n  height: 10em;\\n}\\n.loader {\\n  margin: 7px auto;\\n  font-size: 5px;\\n  position: relative;\\n  text-indent: -9999em;\\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-left: 1.1em solid #ffffff;\\n  -webkit-transform: translateZ(0);\\n  -ms-transform: translateZ(0);\\n  transform: translateZ(0);\\n  -webkit-animation: load8 1.1s infinite linear;\\n  animation: load8 1.1s infinite linear;\\n}\\n\\n@-webkit-keyframes load8 {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\\n@keyframes load8 {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\";\nvar template = \"\\n<div class=\\\"block-ui-wrapper {{name}} {{className}}\\\" [ngClass]=\\\"{ 'active': state.blockCount > 0 }\\\">\\n  <div class=\\\"block-ui-spinner\\\" *ngIf=\\\"!templateCmp\\\">\\n    <div class=\\\"loader\\\"></div>\\n    <div *ngIf=\\\"message || defaultMessage\\\" class=\\\"message\\\">\\n      {{ message || defaultMessage }}\\n    </div>\\n  </div>\\n  <ng-template *ngIf=\\\"templateCmp\\\" #templateOutlet></ng-template>\\n</div>\\n\";\n\nvar BlockUIContentComponent = /*@__PURE__*/function () {\n  var BlockUIContentComponent = /*#__PURE__*/function () {\n    function BlockUIContentComponent(blockUI, resolver, changeDetectionRef) {\n      _classCallCheck(this, BlockUIContentComponent);\n\n      this.blockUI = blockUI;\n      this.resolver = resolver;\n      this.changeDetectionRef = changeDetectionRef;\n      this.name = BlockUIDefaultName;\n      this.defaultBlockState = {\n        startTimeouts: [],\n        stopTimeouts: [],\n        updateTimeouts: [],\n        blockCount: 0,\n        startCallCount: 0,\n        stopCallCount: 0\n      };\n      this.state = Object.assign({}, this.defaultBlockState);\n    }\n\n    _createClass(BlockUIContentComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.settings = this.blockUI.getSettings();\n        this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        try {\n          if (!this.templateCmp) {\n            return false;\n          }\n\n          if (this.templateCmp instanceof TemplateRef) {\n            this.templateOutlet.createEmbeddedView(this.templateCmp);\n          } else {\n            var templateComp = this.resolver.resolveComponentFactory(this.templateCmp);\n            this.templateCompRef = this.templateOutlet.createComponent(templateComp);\n            this.updateBlockTemplate(this.message);\n          }\n        } catch (error) {\n          console.error('ng-block-ui:', error);\n        }\n      }\n    }, {\n      key: \"ngAfterViewChecked\",\n      value: function ngAfterViewChecked() {\n        this.detectChanges();\n      }\n    }, {\n      key: \"subscribeToBlockUI\",\n      value: function subscribeToBlockUI(blockUI$) {\n        var _this = this;\n\n        return blockUI$.subscribe(function (event) {\n          return _this.onDispatchedEvent(event);\n        });\n      }\n    }, {\n      key: \"onDispatchedEvent\",\n      value: function onDispatchedEvent(event) {\n        switch (event.action) {\n          case BlockUIActions.START:\n            this.onStart(event);\n            break;\n\n          case BlockUIActions.STOP:\n            this.onStop(event);\n            break;\n\n          case BlockUIActions.UPDATE:\n            this.onUpdate(event);\n            break;\n\n          case BlockUIActions.RESET:\n            this.onReset(event);\n            break;\n\n          case BlockUIActions.RESET_GLOBAL:\n            this.resetState();\n            break;\n\n          case BlockUIActions.UNSUBSCRIBE:\n            this.onStop(event);\n            this.onUnsubscribe(event.name);\n            break;\n        }\n      }\n    }, {\n      key: \"onStart\",\n      value: function onStart(_ref2) {\n        var _this2 = this;\n\n        var name = _ref2.name,\n            message = _ref2.message;\n\n        if (name === this.name) {\n          var delay = this.delayStart || this.settings.delayStart || 0;\n          this.state.startCallCount += 1;\n          var startTimeout = setTimeout(function () {\n            _this2.state.blockCount += 1;\n\n            _this2.showBlock(message);\n\n            _this2.updateInstanceBlockCount();\n          }, delay);\n          this.state.startTimeouts.push(startTimeout);\n        }\n      }\n    }, {\n      key: \"onStop\",\n      value: function onStop(_ref3) {\n        var _this3 = this;\n\n        var name = _ref3.name;\n\n        if (name === this.name) {\n          var stopCount = this.state.stopCallCount + 1;\n\n          if (this.state.startCallCount - stopCount >= 0) {\n            var delay = this.delayStop || this.settings.delayStop || 0;\n            this.state.stopCallCount = stopCount;\n            var stopTimeout = setTimeout(function () {\n              _this3.state.blockCount -= 1;\n\n              _this3.updateInstanceBlockCount();\n\n              _this3.detectChanges();\n            }, delay);\n            this.state.stopTimeouts.push(stopTimeout);\n          }\n        }\n      }\n    }, {\n      key: \"onUpdate\",\n      value: function onUpdate(_ref4) {\n        var _this4 = this;\n\n        var name = _ref4.name,\n            message = _ref4.message;\n\n        if (name === this.name) {\n          var delay = this.delayStart || this.settings.delayStart || 0;\n          clearTimeout(this.state.updateTimeouts[0]);\n          var updateTimeout = setTimeout(function () {\n            _this4.updateMessage(message);\n          }, delay);\n          this.state.updateTimeouts.push(updateTimeout);\n        }\n      }\n    }, {\n      key: \"onReset\",\n      value: function onReset(_ref5) {\n        var name = _ref5.name;\n\n        if (name === this.name) {\n          this.resetState();\n        }\n      }\n    }, {\n      key: \"updateMessage\",\n      value: function updateMessage(message) {\n        this.showBlock(message);\n      }\n    }, {\n      key: \"showBlock\",\n      value: function showBlock(message) {\n        this.message = message || this.defaultMessage || this.settings.message;\n        this.updateBlockTemplate(this.message);\n        this.detectChanges();\n      }\n    }, {\n      key: \"updateBlockTemplate\",\n      value: function updateBlockTemplate(msg) {\n        if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {\n          this.templateCompRef.instance.message = msg;\n        }\n      }\n    }, {\n      key: \"resetState\",\n      value: function resetState() {\n        [].concat(_toConsumableArray(this.state.startTimeouts), _toConsumableArray(this.state.stopTimeouts), _toConsumableArray(this.state.updateTimeouts)).forEach(clearTimeout);\n        this.state = Object.assign({}, this.defaultBlockState);\n        this.updateInstanceBlockCount();\n        this.detectChanges();\n      }\n    }, {\n      key: \"onUnsubscribe\",\n      value: function onUnsubscribe(name) {\n        if (this.blockUISubscription && name === this.name) {\n          this.blockUISubscription.unsubscribe();\n        }\n      }\n    }, {\n      key: \"updateInstanceBlockCount\",\n      value: function updateInstanceBlockCount() {\n        if (this.blockUI.blockUIInstances[this.name]) {\n          var blockCount = this.state.blockCount;\n          this.blockUI.blockUIInstances[this.name].blockCount = blockCount;\n        }\n      }\n    }, {\n      key: \"detectChanges\",\n      value: function detectChanges() {\n        if (!this.changeDetectionRef['destroyed']) {\n          this.changeDetectionRef.detectChanges();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.resetState();\n        this.onUnsubscribe(this.name);\n        this.blockUI.clearInstance(this.name);\n      }\n    }]);\n\n    return BlockUIContentComponent;\n  }();\n\n  BlockUIContentComponent.ɵfac = function BlockUIContentComponent_Factory(t) {\n    return new (t || BlockUIContentComponent)(ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  BlockUIContentComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BlockUIContentComponent,\n    selectors: [[\"block-ui-content\"]],\n    viewQuery: function BlockUIContentComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 5, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateOutlet = _t.first);\n      }\n    },\n    inputs: {\n      name: \"name\",\n      delayStart: \"delayStart\",\n      delayStop: \"delayStop\",\n      defaultMessage: [\"message\", \"defaultMessage\"],\n      templateCmp: [\"template\", \"templateCmp\"]\n    },\n    decls: 3,\n    vars: 9,\n    consts: [[3, \"ngClass\"], [\"class\", \"block-ui-spinner\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"block-ui-spinner\"], [1, \"loader\"], [\"class\", \"message\", 4, \"ngIf\"], [1, \"message\"], [\"templateOutlet\", \"\"]],\n    template: function BlockUIContentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, BlockUIContentComponent_div_1_Template, 3, 1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, BlockUIContentComponent_2_Template, 2, 0, undefined, 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMapInterpolate2(\"block-ui-wrapper \", ctx.name, \" \", ctx.className, \"\");\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(7, _c2, ctx.state.blockCount > 0));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.templateCmp);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.templateCmp);\n      }\n    },\n    directives: [ɵngcc1.NgClass, ɵngcc1.NgIf],\n    styles: [\"\\n.block-ui-wrapper {\\n  display: none;\\n  position: fixed;\\n  height: 100%;\\n  width: 100%;\\n  top: 0;\\n  left: 0;\\n  background: rgba(0, 0, 0, 0.70);\\n  z-index: 30000;\\n  cursor: wait;\\n}\\n\\n.block-ui-wrapper.block-ui-wrapper--element {\\n  position: absolute;\\n}\\n\\n.block-ui-wrapper.active {\\n  display: block;\\n}\\n\\n.block-ui-wrapper.block-ui-main {\\n  position: fixed;\\n}\\n\\n.block-ui-spinner,\\n.block-ui-template {\\n  position: absolute;\\n  top: 40%;\\n  margin: 0 auto;\\n  left: 0;\\n  right: 0;\\n  transform: translateY(-50%);\\n}\\n\\n.block-ui-spinner > .message {\\n  font-size: 1.3em;\\n  text-align: center;\\n  color: #fff;\\n}\\n\\n.block-ui__element {\\n  position: relative;\\n}\\n\\n.loader,\\n.loader:after {\\n  border-radius: 50%;\\n  width: 10em;\\n  height: 10em;\\n}\\n.loader {\\n  margin: 7px auto;\\n  font-size: 5px;\\n  position: relative;\\n  text-indent: -9999em;\\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-left: 1.1em solid #ffffff;\\n  -webkit-transform: translateZ(0);\\n  -ms-transform: translateZ(0);\\n  transform: translateZ(0);\\n  -webkit-animation: load8 1.1s infinite linear;\\n  animation: load8 1.1s infinite linear;\\n}\\n\\n@-webkit-keyframes load8 {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\\n@keyframes load8 {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\"],\n    encapsulation: 2\n  });\n  return BlockUIContentComponent;\n}();\n\nvar BlockUIService = /*@__PURE__*/function () {\n  var BlockUIService = /*#__PURE__*/function () {\n    function BlockUIService(blockUIInstance) {\n      _classCallCheck(this, BlockUIService);\n\n      this.blockUIInstance = blockUIInstance;\n      this.globalDispatch = this.blockUIInstance.decorate();\n    }\n    /**\n    * Starts blocking for given BlockUI instance or instances\n    */\n\n\n    _createClass(BlockUIService, [{\n      key: \"start\",\n      value: function start(target, message) {\n        this.dispatch(target, BlockUIActions.START, message);\n      }\n      /**\n      * Stops blocking for given BlockUI instance or instances\n      */\n\n    }, {\n      key: \"stop\",\n      value: function stop(target) {\n        this.dispatch(target, BlockUIActions.STOP);\n      }\n      /**\n      * Reset blocking for given BlockUI instance or instances\n      */\n\n    }, {\n      key: \"reset\",\n      value: function reset(target) {\n        this.dispatch(target, BlockUIActions.RESET);\n      }\n      /**\n      * Reset blocking for all BlockUI instances\n      */\n\n    }, {\n      key: \"resetGlobal\",\n      value: function resetGlobal() {\n        this.globalDispatch.resetGlobal();\n      }\n      /**\n      * Updates message for given BlockUI instance or instances\n      */\n\n    }, {\n      key: \"update\",\n      value: function update(target, message) {\n        this.dispatch(target, BlockUIActions.UPDATE, message);\n      }\n      /**\n      * Unsubscribes for given BlockUI instance or instances\n      */\n\n    }, {\n      key: \"unsubscribe\",\n      value: function unsubscribe(target) {\n        this.dispatch(target, BlockUIActions.UNSUBSCRIBE);\n      }\n      /**\n      * Checks if BlockUI is actively blocking\n      */\n\n    }, {\n      key: \"isActive\",\n      value: function isActive() {\n        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var targets = target ? this.toArray(target) : null;\n        var instances = this.blockUIInstance.blockUIInstances;\n        return Object.keys(instances).some(function (key) {\n          if (!targets) {\n            return instances[key].isActive;\n          }\n\n          return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;\n        });\n      }\n    }, {\n      key: \"dispatch\",\n      value: function dispatch() {\n        var _this5 = this;\n\n        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var type = arguments.length > 1 ? arguments[1] : undefined;\n        var message = arguments.length > 2 ? arguments[2] : undefined;\n        var instances = this.toArray(target);\n        instances.forEach(function (i) {\n          return _this5.blockUIInstance.decorate(i)[type](message);\n        });\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return typeof target === 'string' ? [target] : target;\n      }\n    }]);\n\n    return BlockUIService;\n  }();\n\n  BlockUIService.ɵfac = function BlockUIService_Factory(t) {\n    return new (t || BlockUIService)(ɵngcc0.ɵɵinject(BlockUIInstanceService));\n  };\n\n  BlockUIService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BlockUIService,\n    factory: function factory(t) {\n      return BlockUIService.ɵfac(t);\n    }\n  });\n  return BlockUIService;\n}();\n\nvar BlockUIDirective = /*@__PURE__*/function () {\n  var BlockUIDirective = /*#__PURE__*/function () {\n    function BlockUIDirective(blockUIService, blockUIInstanceService, viewRef, templateRef, renderer, componentFactoryResolver) {\n      _classCallCheck(this, BlockUIDirective);\n\n      this.blockUIService = blockUIService;\n      this.blockUIInstanceService = blockUIInstanceService;\n      this.viewRef = viewRef;\n      this.templateRef = templateRef;\n      this.renderer = renderer;\n      this.componentFactoryResolver = componentFactoryResolver;\n    }\n\n    _createClass(BlockUIDirective, [{\n      key: \"blockUI\",\n      set: function set(name) {\n        this.blockTarget = name;\n      }\n    }, {\n      key: \"blockUIMessage\",\n      set: function set(message) {\n        this.message = message;\n      }\n    }, {\n      key: \"blockUITemplate\",\n      set: function set(template) {\n        this.template = template;\n      }\n    }, {\n      key: \"blockUIDelayStart\",\n      set: function set(delayStart) {\n        this.delayStart = delayStart ? Number(delayStart) : null;\n      }\n    }, {\n      key: \"blockUIDelayStop\",\n      set: function set(delayStop) {\n        this.delayStop = delayStop ? Number(delayStop) : null;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        try {\n          this.viewRef.createEmbeddedView(this.templateRef);\n          var parentElement = this.getParentElement();\n\n          if (parentElement && !this.isComponentInTemplate(parentElement)) {\n            this.renderer.addClass(parentElement, 'block-ui__element');\n            this.blockUIComponentRef = this.createComponent();\n            var blockUIContent = this.findContentNode(this.viewRef.element.nativeElement);\n\n            if (blockUIContent) {\n              var settings = this.blockUIInstanceService.getSettings();\n              parentElement.appendChild(blockUIContent);\n              this.blockUIComponentRef.instance.className = 'block-ui-wrapper--element';\n              this.blockUIComponentRef.instance.name = this.blockTarget || BlockUIDefaultName;\n              if (this.message) this.blockUIComponentRef.instance.defaultMessage = this.message;\n              if (this.delayStart) this.blockUIComponentRef.instance.delayStart = this.delayStart;\n              if (this.delayStop) this.blockUIComponentRef.instance.delayStop = this.delayStop;\n              if (this.template || settings.template) this.blockUIComponentRef.instance.templateCmp = this.template || settings.template;\n            }\n          }\n        } catch (error) {\n          console.error('ng-block-ui:', error);\n        }\n      }\n    }, {\n      key: \"isComponentInTemplate\",\n      value: function isComponentInTemplate(element) {\n        // Needed because of https://github.com/microsoft/TypeScript/issues/26235\n        var targetElement = element || {};\n        var children = targetElement.children;\n        children = Array.from(children || []).reverse();\n        return children.some(function (el) {\n          return el && el.localName === 'block-ui';\n        });\n      }\n    }, {\n      key: \"getParentElement\",\n      value: function getParentElement() {\n        var embeddedView = this.viewRef.get(0);\n        return embeddedView.rootNodes[0];\n      } // Needed for IE (#17)\n\n    }, {\n      key: \"findContentNode\",\n      value: function findContentNode(element) {\n        var nextSibling = element.nextSibling || {};\n        var previousSibling = element.previousSibling || {};\n        return [nextSibling, nextSibling.nextSibling, previousSibling, previousSibling.previousSibling].find(function (e) {\n          return e && e.localName === 'block-ui-content';\n        });\n      }\n    }, {\n      key: \"createComponent\",\n      value: function createComponent() {\n        var resolvedBlockUIComponent = this.componentFactoryResolver.resolveComponentFactory(BlockUIContentComponent);\n        return this.viewRef.createComponent(resolvedBlockUIComponent);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.blockTarget) {\n          this.blockUIService.reset(this.blockTarget);\n        }\n      }\n    }]);\n\n    return BlockUIDirective;\n  }();\n\n  BlockUIDirective.ɵfac = function BlockUIDirective_Factory(t) {\n    return new (t || BlockUIDirective)(ɵngcc0.ɵɵdirectiveInject(BlockUIService), ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver));\n  };\n\n  BlockUIDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BlockUIDirective,\n    selectors: [[\"\", \"blockUI\", \"\"]],\n    inputs: {\n      blockUI: \"blockUI\",\n      blockUIMessage: \"blockUIMessage\",\n      blockUITemplate: \"blockUITemplate\",\n      blockUIDelayStart: \"blockUIDelayStart\",\n      blockUIDelayStop: \"blockUIDelayStop\"\n    }\n  });\n  return BlockUIDirective;\n}();\n\nvar BlockUIModule_1;\nvar BlockUIServiceInstance = new BlockUIInstanceService(); // Needed for AOT compiling\n\nvar BlockUIModuleSettings = new InjectionToken('BlockUIModuleSettings');\n\nfunction provideInstance(settings) {\n  BlockUIServiceInstance.updateSettings(settings);\n  return BlockUIServiceInstance;\n}\n\nvar BlockUIModule = /*@__PURE__*/function () {\n  var BlockUIModule = BlockUIModule_1 = /*#__PURE__*/function () {\n    function BlockUIModule() {\n      _classCallCheck(this, BlockUIModule);\n    }\n\n    _createClass(BlockUIModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot() {\n        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          ngModule: BlockUIModule_1,\n          providers: [{\n            provide: BlockUIModuleSettings,\n            useValue: settings\n          }, {\n            provide: BlockUIInstanceService,\n            useFactory: provideInstance,\n            deps: [BlockUIModuleSettings]\n          }, BlockUIService]\n        };\n      }\n    }]);\n\n    return BlockUIModule;\n  }();\n\n  BlockUIModule.ɵfac = function BlockUIModule_Factory(t) {\n    return new (t || BlockUIModule)();\n  };\n\n  BlockUIModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: BlockUIModule\n  });\n  BlockUIModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return BlockUIModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUIModule, {\n    declarations: function declarations() {\n      return [BlockUIComponent, BlockUIDirective, BlockUIContentComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [BlockUIComponent, BlockUIDirective, BlockUIContentComponent];\n    }\n  });\n})();\n\nvar blockInstanceGuid = 1;\n\nfunction BlockUI(blockName) {\n  var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!settings.scopeToInstance) {\n    return function (target, propertyKey) {\n      target[propertyKey] = BlockUIServiceInstance.decorate(blockName);\n    };\n  }\n\n  return function (target, key) {\n    var secret = \"_\".concat(key, \"-block-ui\");\n    Object.defineProperty(target, key, {\n      get: function get() {\n        if (this[secret]) {\n          return this[secret];\n        }\n\n        var instanceName = \"\".concat(blockName, \"-\").concat(blockInstanceGuid++);\n        this[secret] = BlockUIServiceInstance.decorate(instanceName);\n        return this[secret];\n      },\n      set: function set(value) {\n        this[secret] = value;\n      }\n    });\n  };\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BlockUIDefaultName as BLOCKUI_DEFAULT, BlockUI, BlockUIComponent, BlockUIContentComponent, BlockUIModule, BlockUIService, BlockUIModuleSettings as ɵa, provideInstance as ɵb, BlockUIInstanceService as ɵc, template as ɵd, styles as ɵe, BlockUIDirective as ɵf }; //# sourceMappingURL=ng-block-ui.js.map","map":null,"metadata":{},"sourceType":"module"}