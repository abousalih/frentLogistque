{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StompHandler } from './stomp-handler';\nimport { ActivationState, StompSocketState } from './types';\nimport { Versions } from './versions';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\n\nexport var Client = /*#__PURE__*/function () {\n  /**\n   * Create an instance.\n   */\n  function Client() {\n    var conf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    /**\n     * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n     *\n     * Example:\n     * ```javascript\n     *        // Try only versions 1.0 and 1.1\n     *        client.stompVersions = new Versions(['1.0', '1.1'])\n     * ```\n     */\n    this.stompVersions = Versions.default;\n    /**\n     * Will retry if Stomp connection is not established in specified milliseconds.\n     * Default 0, which implies wait for ever.\n     */\n\n    this.connectionTimeout = 0;\n    /**\n     *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n     */\n\n    this.reconnectDelay = 5000;\n    /**\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n     */\n\n    this.heartbeatIncoming = 10000;\n    /**\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n     */\n\n    this.heartbeatOutgoing = 10000;\n    /**\n     * This switches on a non standard behavior while sending WebSocket packets.\n     * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n     * Only Java Spring brokers seems to use this mode.\n     *\n     * WebSockets, by itself, split large (text) packets,\n     * so it is not needed with a truly compliant STOMP/WebSocket broker.\n     * Actually setting it for such broker will cause large messages to fail.\n     *\n     * `false` by default.\n     *\n     * Binary frames are never split.\n     */\n\n    this.splitLargeFrames = false;\n    /**\n     * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n     * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n     */\n\n    this.maxWebSocketChunkSize = 8 * 1024;\n    /**\n     * Usually the\n     * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n     * is automatically decided by type of the payload.\n     * Default is `false`, which should work with all compliant brokers.\n     *\n     * Set this flag to force binary frames.\n     */\n\n    this.forceBinaryWSFrames = false;\n    /**\n     * A bug in ReactNative chops a string on occurrence of a NULL.\n     * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n     * This makes incoming WebSocket messages invalid STOMP packets.\n     * Setting this flag attempts to reverse the damage by appending a NULL.\n     * If the broker splits a large message into multiple WebSocket messages,\n     * this flag will cause data loss and abnormal termination of connection.\n     *\n     * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n     */\n\n    this.appendMissingNULLonIncoming = false;\n    /**\n     * Activation state.\n     *\n     * It will usually be ACTIVE or INACTIVE.\n     * When deactivating it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n     */\n\n    this.state = ActivationState.INACTIVE; // Dummy callbacks\n\n    var noOp = function noOp() {};\n\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp; // These parameters would typically get proper values before connect is called\n\n    this.connectHeaders = {};\n    this._disconnectHeaders = {}; // Apply configuration\n\n    this.configure(conf);\n  }\n  /**\n   * Underlying WebSocket instance, READONLY.\n   */\n\n\n  _createClass(Client, [{\n    key: \"webSocket\",\n    get: function get() {\n      return this._stompHandler ? this._stompHandler._webSocket : undefined;\n    }\n    /**\n     * Disconnection headers.\n     */\n\n  }, {\n    key: \"disconnectHeaders\",\n    get: function get() {\n      return this._disconnectHeaders;\n    },\n    set: function set(value) {\n      this._disconnectHeaders = value;\n\n      if (this._stompHandler) {\n        this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n      }\n    }\n    /**\n     * `true` if there is a active connection with STOMP Broker\n     */\n\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n\n  }, {\n    key: \"connectedVersion\",\n    get: function get() {\n      return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this.state === ActivationState.ACTIVE;\n    }\n  }, {\n    key: \"_changeState\",\n    value: function _changeState(state) {\n      this.state = state;\n      this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n\n  }, {\n    key: \"configure\",\n    value: function configure(conf) {\n      // bulk assign all properties to this\n      Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      if (this.state === ActivationState.DEACTIVATING) {\n        this.debug('Still DEACTIVATING, please await call to deactivate before trying to re-activate');\n        throw new Error('Still DEACTIVATING, can not activate now');\n      }\n\n      if (this.active) {\n        this.debug('Already ACTIVE, ignoring request to activate');\n        return;\n      }\n\n      this._changeState(ActivationState.ACTIVE);\n\n      this._connect();\n    }\n  }, {\n    key: \"_connect\",\n    value: function _connect() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var webSocket;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.connected) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this.debug('STOMP: already connected, nothing to do');\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.next = 5;\n                return this.beforeConnect();\n\n              case 5:\n                if (this.active) {\n                  _context.next = 8;\n                  break;\n                }\n\n                this.debug('Client has been marked inactive, will not attempt to connect');\n                return _context.abrupt(\"return\");\n\n              case 8:\n                // setup connection watcher\n                if (this.connectionTimeout > 0) {\n                  // clear first\n                  if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                  }\n\n                  this._connectionWatcher = setTimeout(function () {\n                    if (_this.connected) {\n                      return;\n                    } // Connection not established, close the underlying socket\n                    // a reconnection will be attempted\n\n\n                    _this.debug(\"Connection not established in \".concat(_this.connectionTimeout, \"ms, closing socket\"));\n\n                    _this.forceDisconnect();\n                  }, this.connectionTimeout);\n                }\n\n                this.debug('Opening Web Socket...'); // Get the actual WebSocket (or a similar object)\n\n                webSocket = this._createWebSocket();\n                this._stompHandler = new StompHandler(this, webSocket, {\n                  debug: this.debug,\n                  stompVersions: this.stompVersions,\n                  connectHeaders: this.connectHeaders,\n                  disconnectHeaders: this._disconnectHeaders,\n                  heartbeatIncoming: this.heartbeatIncoming,\n                  heartbeatOutgoing: this.heartbeatOutgoing,\n                  splitLargeFrames: this.splitLargeFrames,\n                  maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n                  forceBinaryWSFrames: this.forceBinaryWSFrames,\n                  logRawCommunication: this.logRawCommunication,\n                  appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n                  discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n                  onConnect: function onConnect(frame) {\n                    // Successfully connected, stop the connection watcher\n                    if (_this._connectionWatcher) {\n                      clearTimeout(_this._connectionWatcher);\n                      _this._connectionWatcher = undefined;\n                    }\n\n                    if (!_this.active) {\n                      _this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n\n                      _this._disposeStompHandler();\n\n                      return;\n                    }\n\n                    _this.onConnect(frame);\n                  },\n                  onDisconnect: function onDisconnect(frame) {\n                    _this.onDisconnect(frame);\n                  },\n                  onStompError: function onStompError(frame) {\n                    _this.onStompError(frame);\n                  },\n                  onWebSocketClose: function onWebSocketClose(evt) {\n                    _this._stompHandler = undefined; // a new one will be created in case of a reconnect\n\n                    if (_this.state === ActivationState.DEACTIVATING) {\n                      // Mark deactivation complete\n                      _this._resolveSocketClose();\n\n                      _this._resolveSocketClose = undefined;\n\n                      _this._changeState(ActivationState.INACTIVE);\n                    }\n\n                    _this.onWebSocketClose(evt); // The callback is called before attempting to reconnect, this would allow the client\n                    // to be `deactivated` in the callback.\n\n\n                    if (_this.active) {\n                      _this._schedule_reconnect();\n                    }\n                  },\n                  onWebSocketError: function onWebSocketError(evt) {\n                    _this.onWebSocketError(evt);\n                  },\n                  onUnhandledMessage: function onUnhandledMessage(message) {\n                    _this.onUnhandledMessage(message);\n                  },\n                  onUnhandledReceipt: function onUnhandledReceipt(frame) {\n                    _this.onUnhandledReceipt(frame);\n                  },\n                  onUnhandledFrame: function onUnhandledFrame(frame) {\n                    _this.onUnhandledFrame(frame);\n                  }\n                });\n\n                this._stompHandler.start();\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_createWebSocket\",\n    value: function _createWebSocket() {\n      var webSocket;\n\n      if (this.webSocketFactory) {\n        webSocket = this.webSocketFactory();\n      } else {\n        webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n      }\n\n      webSocket.binaryType = 'arraybuffer';\n      return webSocket;\n    }\n  }, {\n    key: \"_schedule_reconnect\",\n    value: function _schedule_reconnect() {\n      var _this2 = this;\n\n      if (this.reconnectDelay > 0) {\n        this.debug(\"STOMP: scheduling reconnection in \".concat(this.reconnectDelay, \"ms\"));\n        this._reconnector = setTimeout(function () {\n          _this2._connect();\n        }, this.reconnectDelay);\n      }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n     *\n     * This call is async, it will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after underlying websocket is properly disposed.\n     *\n     * To reactivate you can call [Client#activate]{@link Client#activate}.\n     */\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var retPromise;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.state !== ActivationState.ACTIVE)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                this.debug(\"Already \".concat(ActivationState[this.state], \", ignoring call to deactivate\"));\n                return _context2.abrupt(\"return\", Promise.resolve());\n\n              case 3:\n                this._changeState(ActivationState.DEACTIVATING); // Clear if a reconnection was scheduled\n\n\n                if (this._reconnector) {\n                  clearTimeout(this._reconnector);\n                }\n\n                if (!(this._stompHandler && this.webSocket.readyState !== StompSocketState.CLOSED)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                // we need to wait for underlying websocket to close\n                retPromise = new Promise(function (resolve, reject) {\n                  _this3._resolveSocketClose = resolve;\n                });\n                _context2.next = 11;\n                break;\n\n              case 9:\n                // indicate that auto reconnect loop should terminate\n                this._changeState(ActivationState.INACTIVE);\n\n                return _context2.abrupt(\"return\", Promise.resolve());\n\n              case 11:\n                this._disposeStompHandler();\n\n                return _context2.abrupt(\"return\", retPromise);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n\n  }, {\n    key: \"forceDisconnect\",\n    value: function forceDisconnect() {\n      if (this._stompHandler) {\n        this._stompHandler.forceDisconnect();\n      }\n    }\n  }, {\n    key: \"_disposeStompHandler\",\n    value: function _disposeStompHandler() {\n      // Dispose STOMP Handler\n      if (this._stompHandler) {\n        this._stompHandler.dispose();\n\n        this._stompHandler = null;\n      }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body use binaryBody parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n     * and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n\n  }, {\n    key: \"publish\",\n    value: function publish(params) {\n      this._stompHandler.publish(params);\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n     * random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based in the value of the receipt-id.\n     *\n     * This method allow watching for a receipt and invoke the callback\n     * when corresponding receipt has been received.\n     *\n     * The actual {@link FrameImpl} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n\n  }, {\n    key: \"watchForReceipt\",\n    value: function watchForReceipt(receiptId, callback) {\n      this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n     * the {@link IMessage} as argument.\n     *\n     * Note: The library will generate an unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the headers argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(destination, callback) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n\n  }, {\n    key: \"begin\",\n    value: function begin(transactionId) {\n      return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit(transactionId) {\n      this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n\n  }, {\n    key: \"abort\",\n    value: function abort(transactionId) {\n      this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n\n  }, {\n    key: \"nack\",\n    value: function nack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n  }]);\n\n  return Client;\n}(); //# sourceMappingURL=client.js.map","map":{"version":3,"sources":["/Users/mac/Apps/sr-manager/frontend/node_modules/@stomp/stompjs/esm6/client.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","StompHandler","ActivationState","StompSocketState","Versions","Client","conf","stompVersions","default","connectionTimeout","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","appendMissingNULLonIncoming","state","INACTIVE","noOp","debug","beforeConnect","onConnect","onDisconnect","onUnhandledMessage","onUnhandledReceipt","onUnhandledFrame","onStompError","onWebSocketClose","onWebSocketError","logRawCommunication","onChangeState","connectHeaders","_disconnectHeaders","configure","_stompHandler","_webSocket","undefined","disconnectHeaders","connected","connectedVersion","ACTIVE","Object","assign","DEACTIVATING","Error","active","_changeState","_connect","_connectionWatcher","clearTimeout","setTimeout","forceDisconnect","webSocket","_createWebSocket","discardWebsocketOnCommFailure","frame","_disposeStompHandler","evt","_resolveSocketClose","_schedule_reconnect","message","start","webSocketFactory","WebSocket","brokerURL","protocolVersions","binaryType","_reconnector","readyState","CLOSED","retPromise","dispose","params","publish","receiptId","callback","watchForReceipt","destination","headers","subscribe","id","unsubscribe","transactionId","begin","commit","abort","messageId","subscriptionId","ack","nack"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StompHandler } from './stomp-handler';\nimport { ActivationState, StompSocketState, } from './types';\nimport { Versions } from './versions';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.0 and 1.1\n         *        client.stompVersions = new Versions(['1.0', '1.1'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which implies wait for ever.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seems to use this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Actually setting it for such broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // Dummy callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler ? this._stompHandler._webSocket : undefined;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is a active connection with STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Still DEACTIVATING, please await call to deactivate before trying to re-activate');\n            throw new Error('Still DEACTIVATING, can not activate now');\n        }\n        if (this.active) {\n            this.debug('Already ACTIVE, ignoring request to activate');\n            return;\n        }\n        this._changeState(ActivationState.ACTIVE);\n        this._connect();\n    }\n    _connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connected) {\n                this.debug('STOMP: already connected, nothing to do');\n                return;\n            }\n            yield this.beforeConnect();\n            if (!this.active) {\n                this.debug('Client has been marked inactive, will not attempt to connect');\n                return;\n            }\n            // setup connection watcher\n            if (this.connectionTimeout > 0) {\n                // clear first\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                }\n                this._connectionWatcher = setTimeout(() => {\n                    if (this.connected) {\n                        return;\n                    }\n                    // Connection not established, close the underlying socket\n                    // a reconnection will be attempted\n                    this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                    this.forceDisconnect();\n                }, this.connectionTimeout);\n            }\n            this.debug('Opening Web Socket...');\n            // Get the actual WebSocket (or a similar object)\n            const webSocket = this._createWebSocket();\n            this._stompHandler = new StompHandler(this, webSocket, {\n                debug: this.debug,\n                stompVersions: this.stompVersions,\n                connectHeaders: this.connectHeaders,\n                disconnectHeaders: this._disconnectHeaders,\n                heartbeatIncoming: this.heartbeatIncoming,\n                heartbeatOutgoing: this.heartbeatOutgoing,\n                splitLargeFrames: this.splitLargeFrames,\n                maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n                forceBinaryWSFrames: this.forceBinaryWSFrames,\n                logRawCommunication: this.logRawCommunication,\n                appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n                discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n                onConnect: frame => {\n                    // Successfully connected, stop the connection watcher\n                    if (this._connectionWatcher) {\n                        clearTimeout(this._connectionWatcher);\n                        this._connectionWatcher = undefined;\n                    }\n                    if (!this.active) {\n                        this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                        this._disposeStompHandler();\n                        return;\n                    }\n                    this.onConnect(frame);\n                },\n                onDisconnect: frame => {\n                    this.onDisconnect(frame);\n                },\n                onStompError: frame => {\n                    this.onStompError(frame);\n                },\n                onWebSocketClose: evt => {\n                    this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                    if (this.state === ActivationState.DEACTIVATING) {\n                        // Mark deactivation complete\n                        this._resolveSocketClose();\n                        this._resolveSocketClose = undefined;\n                        this._changeState(ActivationState.INACTIVE);\n                    }\n                    this.onWebSocketClose(evt);\n                    // The callback is called before attempting to reconnect, this would allow the client\n                    // to be `deactivated` in the callback.\n                    if (this.active) {\n                        this._schedule_reconnect();\n                    }\n                },\n                onWebSocketError: evt => {\n                    this.onWebSocketError(evt);\n                },\n                onUnhandledMessage: message => {\n                    this.onUnhandledMessage(message);\n                },\n                onUnhandledReceipt: frame => {\n                    this.onUnhandledReceipt(frame);\n                },\n                onUnhandledFrame: frame => {\n                    this.onUnhandledFrame(frame);\n                },\n            });\n            this._stompHandler.start();\n        });\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this.reconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                this._connect();\n            }, this.reconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n     *\n     * This call is async, it will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after underlying websocket is properly disposed.\n     *\n     * To reactivate you can call [Client#activate]{@link Client#activate}.\n     */\n    deactivate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let retPromise;\n            if (this.state !== ActivationState.ACTIVE) {\n                this.debug(`Already ${ActivationState[this.state]}, ignoring call to deactivate`);\n                return Promise.resolve();\n            }\n            this._changeState(ActivationState.DEACTIVATING);\n            // Clear if a reconnection was scheduled\n            if (this._reconnector) {\n                clearTimeout(this._reconnector);\n            }\n            if (this._stompHandler &&\n                this.webSocket.readyState !== StompSocketState.CLOSED) {\n                // we need to wait for underlying websocket to close\n                retPromise = new Promise((resolve, reject) => {\n                    this._resolveSocketClose = resolve;\n                });\n            }\n            else {\n                // indicate that auto reconnect loop should terminate\n                this._changeState(ActivationState.INACTIVE);\n                return Promise.resolve();\n            }\n            this._disposeStompHandler();\n            return retPromise;\n        });\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n            this._stompHandler = null;\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body use binaryBody parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n     * and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._stompHandler.publish(params);\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n     * random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based in the value of the receipt-id.\n     *\n     * This method allow watching for a receipt and invoke the callback\n     * when corresponding receipt has been received.\n     *\n     * The actual {@link FrameImpl} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n     * the {@link IMessage} as argument.\n     *\n     * Note: The library will generate an unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the headers argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map"]},"metadata":{},"sourceType":"module"}