{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Directive, Input, HostBinding, HostListener, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\n\nvar isJsons = function isJsons(array) {\n  return Array.isArray(array) && array.every(function (row) {\n    return typeof row === 'object' && !(row instanceof Array);\n  });\n};\n\nvar isArrays = function isArrays(array) {\n  return Array.isArray(array) && array.every(function (row) {\n    return Array.isArray(row);\n  });\n};\n\nfunction jsonsHeaders(array) {\n  return Array.from(new Set(array.map(function (item) {\n    return Object.keys(item);\n  }).reduce(function (a, b) {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }, [])));\n}\n\nfunction jsons2arrays(jsons, headers) {\n  headers = headers || jsonsHeaders(jsons); // allow headers to have custom labels, defaulting to having the header data key be the label\n\n  var headerLabels = headers;\n  var headerKeys = headers;\n\n  if (isJsons(headers)) {\n    headerLabels = headers.map(function (header) {\n      return header.label;\n    });\n    headerKeys = headers.map(function (header) {\n      return header.key;\n    });\n  }\n\n  var data = jsons.map(function (object) {\n    return headerKeys.map(function (header) {\n      return header in object ? object[header] : '';\n    });\n  });\n  return [headerLabels].concat(_toConsumableArray(data));\n}\n\nvar elementOrEmpty = function elementOrEmpty(element) {\n  return element || element === 0 ? element : '';\n};\n\nfunction joiner(data) {\n  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n  return data.map(function (row, index) {\n    return row.map(function (element) {\n      return '\"' + elementOrEmpty(element) + '\"';\n    }).join(delimiter);\n  }).join(\"\\n\");\n}\n\nfunction arrays2csv(data, headers, delimiter) {\n  return joiner(headers ? [headers].concat(_toConsumableArray(data)) : data, delimiter);\n}\n\nfunction jsons2csv(data, headers, delimiter) {\n  return joiner(jsons2arrays(data, headers), delimiter);\n}\n\nfunction string2csv(data, headers, delimiter) {\n  return headers ? \"\".concat(headers.join(delimiter), \"\\n\").concat(data) : data;\n}\n\nfunction toCSV(data, headers, delimiter) {\n  if (isJsons(data)) {\n    return jsons2csv(data, headers, delimiter);\n  }\n\n  if (isArrays(data)) {\n    return arrays2csv(data, headers, delimiter);\n  }\n\n  if (typeof data === 'string') {\n    return string2csv(data, headers, delimiter);\n  }\n\n  throw new TypeError(\"Data should be a \\\"String\\\", \\\"Array of arrays\\\" OR \\\"Array of objects\\\" \");\n}\n\nfunction blob(data) {\n  var uFEFF = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var headers = arguments.length > 2 ? arguments[2] : undefined;\n  var delimiter = arguments.length > 3 ? arguments[3] : undefined;\n  var csv = toCSV(data, headers, delimiter);\n  return new Blob([uFEFF ? \"\\uFEFF\" : '', csv], {\n    type: 'text/csv'\n  });\n}\n\nfunction buildURI(data) {\n  var uFEFF = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var headers = arguments.length > 2 ? arguments[2] : undefined;\n  var delimiter = arguments.length > 3 ? arguments[3] : undefined;\n  return URL.createObjectURL(blob(data, uFEFF, headers, delimiter));\n}\n\nvar CsvDirective = /*@__PURE__*/function () {\n  var CsvDirective = /*#__PURE__*/function () {\n    function CsvDirective(sanitizer) {\n      _classCallCheck(this, CsvDirective);\n\n      this.sanitizer = sanitizer;\n      /** the body of the csv */\n\n      this.data = [];\n      /** Set the seperator between values */\n\n      this.delimiter = ',';\n      /** adds a Byte order mark to setup the csv as UTF-8  */\n\n      this.uFEFF = true;\n      /** filename */\n\n      this.download = 'data.csv';\n      this.target = this.isIEBrowser() ? '' : '_blank';\n    }\n    /** Set the filename of the csv. Default is `data.csv` */\n\n\n    _createClass(CsvDirective, [{\n      key: \"filename\",\n      set: function set(a) {\n        this.download = a;\n      }\n    }, {\n      key: \"onClick\",\n      value: function onClick() {\n        // IE handling\n        if (this.isIEBrowser()) {\n          var file = blob(this.data, this.uFEFF, this.headers, this.delimiter);\n          window.navigator.msSaveBlob(file, this.download);\n        }\n      }\n    }, {\n      key: \"isIEBrowser\",\n      value: function isIEBrowser() {\n        return !!window.navigator.msSaveOrOpenBlob;\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this.href = this.sanitizer.bypassSecurityTrustResourceUrl(buildURI(this.data, this.uFEFF, this.headers, this.delimiter));\n      }\n    }]);\n\n    return CsvDirective;\n  }();\n\n  CsvDirective.ɵfac = function CsvDirective_Factory(t) {\n    return new (t || CsvDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer));\n  };\n\n  CsvDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CsvDirective,\n    selectors: [[\"\", \"csvLink\", \"\"]],\n    hostVars: 3,\n    hostBindings: function CsvDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CsvDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"download\", ctx.download)(\"target\", ctx.target)(\"href\", ctx.href, ɵngcc0.ɵɵsanitizeUrlOrResourceUrl);\n      }\n    },\n    inputs: {\n      data: \"data\",\n      delimiter: \"delimiter\",\n      uFEFF: \"uFEFF\",\n      target: \"target\",\n      filename: \"filename\",\n      headers: \"headers\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CsvDirective;\n}();\n\nvar CsvModule = /*@__PURE__*/function () {\n  var CsvModule = function CsvModule() {\n    _classCallCheck(this, CsvModule);\n  };\n\n  CsvModule.ɵfac = function CsvModule_Factory(t) {\n    return new (t || CsvModule)();\n  };\n\n  CsvModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CsvModule\n  });\n  CsvModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return CsvModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CsvModule, {\n    declarations: [CsvDirective],\n    exports: [CsvDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CsvDirective, CsvModule, arrays2csv, blob, buildURI, elementOrEmpty, isArrays, isJsons, joiner, jsons2arrays, jsons2csv, jsonsHeaders, string2csv, toCSV }; //# sourceMappingURL=ctrl-ngx-csv.js.map","map":null,"metadata":{},"sourceType":"module"}