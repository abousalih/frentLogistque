{"ast":null,"code":"import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function subscribeTo(result) {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\".concat(result, \"'\");\n    var msg = \"You provided \".concat(value, \" where a stream was expected.\") + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n}; //# sourceMappingURL=subscribeTo.js.map","map":{"version":3,"sources":["/Users/mac/Apps/sr-manager/srmanager/node_modules/rxjs/_esm2015/internal/util/subscribeTo.js"],"names":["subscribeToArray","subscribeToPromise","subscribeToIterable","subscribeToObservable","isArrayLike","isPromise","isObject","iterator","Symbol_iterator","observable","Symbol_observable","subscribeTo","result","value","msg","TypeError"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,oBAA/B;AACA,SAAQC,kBAAR,QAAiC,sBAAjC;AACA,SAAQC,mBAAR,QAAkC,uBAAlC;AACA,SAAQC,qBAAR,QAAoC,yBAApC;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,SAAQC,QAAQ,IAAIC,eAApB,QAA0C,oBAA1C;AACA,SAAQC,UAAU,IAAIC,iBAAtB,QAA8C,sBAA9C;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;AACnC,MAAI,CAAC,CAACA,MAAF,IAAY,OAAOA,MAAM,CAACF,iBAAD,CAAb,KAAqC,UAArD,EAAiE;AAC7D,WAAOP,qBAAqB,CAACS,MAAD,CAA5B;AACH,GAFD,MAEO,IAAIR,WAAW,CAACQ,MAAD,CAAf,EAAyB;AAC5B,WAAOZ,gBAAgB,CAACY,MAAD,CAAvB;AACH,GAFM,MAEA,IAAIP,SAAS,CAACO,MAAD,CAAb,EAAuB;AAC1B,WAAOX,kBAAkB,CAACW,MAAD,CAAzB;AACH,GAFM,MAEA,IAAI,CAAC,CAACA,MAAF,IAAY,OAAOA,MAAM,CAACJ,eAAD,CAAb,KAAmC,UAAnD,EAA+D;AAClE,WAAON,mBAAmB,CAACU,MAAD,CAA1B;AACH,GAFM,MAEA;AACH,QAAMC,KAAK,GAAGP,QAAQ,CAACM,MAAD,CAAR,GAAmB,mBAAnB,cAA6CA,MAA7C,MAAd;AACA,QAAME,GAAG,GAAG,uBAAgBD,KAAhB,qCACN,8DADN;AAEA,UAAM,IAAIE,SAAJ,CAAcD,GAAd,CAAN;AACH;AACJ,CAfM,C,CAgBP","sourcesContent":["import {subscribeToArray} from './subscribeToArray';\nimport {subscribeToPromise} from './subscribeToPromise';\nimport {subscribeToIterable} from './subscribeToIterable';\nimport {subscribeToObservable} from './subscribeToObservable';\nimport {isArrayLike} from './isArrayLike';\nimport {isPromise} from './isPromise';\nimport {isObject} from './isObject';\nimport {iterator as Symbol_iterator} from '../symbol/iterator';\nimport {observable as Symbol_observable} from '../symbol/observable';\n\nexport const subscribeTo = (result) => {\n    if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    } else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    } else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    } else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n"]},"metadata":{},"sourceType":"module"}