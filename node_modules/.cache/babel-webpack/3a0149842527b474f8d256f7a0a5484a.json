{"ast":null,"code":"// Experimental API below\n\n/**\n * get input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * Now gets values of inputs (including \"checked\" status radios, checkboxes), textareas and selects (including multiselects)\n * Tries to identify the elements as exact as possible, falls back to numeric index when identification fails\n * WIP refactor by: PatrickJS\n */\nexport function __getInputValues() {\n  var _inputs = document.querySelectorAll('input, textarea, select');\n\n  var inputs = Array.prototype.slice.call(_inputs);\n  return inputs.map(function (input) {\n    var inputTagName = input.tagName.toLowerCase();\n    var inputType = input.type;\n    var inputId = input.id && typeof input.id === 'string' ? input.id : null;\n    var inputName = input.name && typeof input.name === 'string' ? input.name : null;\n    var inputValue = input.value && typeof input.value === 'string' ? input.value : null;\n    var inputChildNodes = input.childNodes;\n    var inputSelected = Boolean(input.selected);\n    var elementStore = {\n      'tag': inputTagName,\n      'type': null,\n      'id': inputId,\n      'name': inputName,\n      'value': '',\n      'checked': false,\n      'options': []\n    };\n\n    if ('input' === inputTagName || 'textarea' === inputTagName) {\n      elementStore['type'] = inputType;\n\n      if ('input' !== inputTagName) {\n        elementStore['value'] = inputValue;\n        return elementStore;\n      }\n\n      switch (inputType) {\n        case 'checkbox':\n        case 'radio':\n          elementStore['checked'] = inputSelected;\n          elementStore['value'] = inputValue;\n          return elementStore;\n\n        case 'image':\n        case 'button':\n        case 'submit':\n        case 'reset':\n        default:\n          // These types don't need any config and thus need no update, they only were stored because they match \"input\"\n          return elementStore;\n      }\n    } else if ('select' === inputTagName) {\n      var childNodes = Array.prototype.slice.call(inputChildNodes);\n      var options = childNodes.map(function (option, i) {\n        return {\n          value: option['value'],\n          selected: Boolean(option['selected'])\n        };\n      });\n      elementStore['options'] = options;\n      return elementStore;\n    }\n\n    return elementStore;\n  });\n}\n/**\n * set input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * WIP refactor by: PatrickJS\n */\n\nexport function __setInputValues($inputs) {\n  var inputs = document.querySelectorAll('input, textarea');\n  $inputs.forEach(function (store, i) {\n    if ('input' === store.tag || 'textarea' === store.tag) {\n      if ('input' === store.tag && ('checkbox' === store.type || 'radio' === store.type)) {\n        var selector = 'input' + (null !== store.id ? '#' + store.id : '') + '[type=\"' + store.type + '\"]' + (null !== store.name ? '[name=\"' + store.name + '\"]' : '') + '[value=\"' + store.value + '\"]';\n        var element = document.body.querySelector(selector);\n\n        if (element && Boolean(store['checked'])) {\n          element['checked'] = 'checked';\n          element.dispatchEvent(new CustomEvent('input', {\n            detail: element['checked']\n          }));\n        }\n      } else if ('input' === store.tagName.toLowerCase() && ('image' === store.type || 'button' === store.type || 'submit' === store.type || 'reset' === store.type)) {// These types don't need any config and thus need no update, they only were stored because they match \"input\"\n      } else {\n        if (null === store.id && null === store.name) {\n          if (store.value.length && inputs[i] && inputs[i].tagName.toLowerCase() === store.tag && ('textarea' === store.tag || inputs[i].getAttribute('type') === store.type) && ('string' !== typeof inputs[i].id || !inputs[i].id.length) && ('string' !== typeof inputs[i].getAttribute('name') || !inputs[i].getAttribute('name').length)) {\n            inputs[i]['value'] = store.value;\n            inputs[i].dispatchEvent(new CustomEvent('input', {\n              detail: inputs[i]['value']\n            }));\n          }\n        } else {\n          var _selector = 'input' + (null !== store.id ? '#' + store.id : '') + ('input' === store.tag ? '[type=\"' + store.type + '\"]' : '') + (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n\n          var _element = document.body.querySelector(_selector);\n\n          if (_element && store.value.length) {\n            _element['value'] = store.value;\n\n            _element.dispatchEvent(new CustomEvent('input', {\n              detail: _element['value']\n            }));\n          }\n        }\n      }\n    } else if ('select' === store.tag) {\n      var select = null;\n\n      if (null === store.id && null === store.name) {\n        if (inputs[i] && inputs[i].tagName.toLowerCase() === store.tag && ('string' !== typeof inputs[i].id || !inputs[i].id.length) && ('string' !== typeof inputs[i].getAttribute('name') || !inputs[i].getAttribute('name').length)) {\n          select = inputs[i];\n        }\n      } else {\n        var _selector2 = 'select' + (null !== store.id ? '#' + store.id : '') + (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n\n        var _element2 = document.body.querySelector(_selector2);\n\n        if (_element2) {\n          select = _element2;\n        }\n      }\n\n      if (select) {\n        store.options.forEach(function (storedOption, j) {\n          var option = select.querySelector('option[value=\"' + storedOption.value + '\"]');\n\n          if (!option && select.childNodes[j] && ('string' !== typeof select.childNodes[j]['value'] || !select.childNodes[j]['value'].length)) {\n            option = select.childNodes[j];\n          }\n\n          if (option && !!storedOption.selected) {\n            option['selected'] = 'selected';\n            option.dispatchEvent(new CustomEvent('input', {\n              detail: option['selected']\n            }));\n          }\n        });\n      }\n    }\n  });\n}\nexport function __createInputTransfer() {\n  var $inputs = __getInputValues();\n\n  return function restoreInputValues() {\n    return __setInputValues($inputs);\n  };\n} //# sourceMappingURL=experimental.js.map","map":null,"metadata":{},"sourceType":"module"}