{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as Plyr from 'plyr';\nimport { __decorate, __metadata } from 'tslib';\nimport { ElementRef, NgZone, Renderer2, Input, ViewChild, Output, Component, NgModule } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, first, switchMap } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"v\"];\n\nvar DefaultPlyrDriver = /*#__PURE__*/function () {\n  function DefaultPlyrDriver() {\n    _classCallCheck(this, DefaultPlyrDriver);\n  }\n\n  _createClass(DefaultPlyrDriver, [{\n    key: \"create\",\n    value: function create(params) {\n      return new Plyr(params.videoElement, params.options);\n    }\n  }, {\n    key: \"updateSource\",\n    value: function updateSource(params) {\n      params.plyr.source = params.source;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(params) {\n      params.plyr.destroy();\n    }\n  }]);\n\n  return DefaultPlyrDriver;\n}();\n\nvar PlyrComponent = /*@__PURE__*/function () {\n  var PlyrComponent = /*#__PURE__*/function () {\n    function PlyrComponent(elementRef, ngZone, renderer) {\n      _classCallCheck(this, PlyrComponent);\n\n      this.elementRef = elementRef;\n      this.ngZone = ngZone;\n      this.renderer = renderer;\n      this.playerChange = new BehaviorSubject(null);\n      this.events = new Map();\n      this.plyrType = 'video'; // ngx-plyr events\n\n      this.plyrInit = this.playerChange.pipe(filter(function (player) {\n        return !!player;\n      })); // standard media events\n\n      this.plyrProgress = this.createLazyEvent('progress');\n      this.plyrPlaying = this.createLazyEvent('playing');\n      this.plyrPlay = this.createLazyEvent('play');\n      this.plyrPause = this.createLazyEvent('pause');\n      this.plyrTimeUpdate = this.createLazyEvent('timeupdate');\n      this.plyrVolumeChange = this.createLazyEvent('volumechange');\n      this.plyrSeeking = this.createLazyEvent('seeking');\n      this.plyrSeeked = this.createLazyEvent('seeked');\n      this.plyrRateChange = this.createLazyEvent('ratechange');\n      this.plyrEnded = this.createLazyEvent('ended');\n      this.plyrEnterFullScreen = this.createLazyEvent('enterfullscreen');\n      this.plyrExitFullScreen = this.createLazyEvent('exitfullscreen');\n      this.plyrCaptionsEnabled = this.createLazyEvent('captionsenabled');\n      this.plyrCaptionsDisabled = this.createLazyEvent('captionsdisabled');\n      this.plyrLanguageChange = this.createLazyEvent('languagechange');\n      this.plyrControlsHidden = this.createLazyEvent('controlshidden');\n      this.plyrControlsShown = this.createLazyEvent('controlsshown');\n      this.plyrReady = this.createLazyEvent('ready'); // HTML5 events\n\n      this.plyrLoadStart = this.createLazyEvent('loadstart');\n      this.plyrLoadedData = this.createLazyEvent('loadeddata');\n      this.plyrLoadedMetadata = this.createLazyEvent('loadedmetadata');\n      this.plyrQualityChange = this.createLazyEvent('qualitychange');\n      this.plyrCanPlay = this.createLazyEvent('canplay');\n      this.plyrCanPlayThrough = this.createLazyEvent('canplaythrough');\n      this.plyrStalled = this.createLazyEvent('stalled');\n      this.plyrWaiting = this.createLazyEvent('waiting');\n      this.plyrEmptied = this.createLazyEvent('emptied');\n      this.plyrCueChange = this.createLazyEvent('cuechange');\n      this.plyrError = this.createLazyEvent('error'); // YouTube events\n\n      this.plyrStateChange = this.createLazyEvent('statechange');\n      this.subscriptions = [];\n    }\n\n    _createClass(PlyrComponent, [{\n      key: \"player\",\n      get: function get() {\n        return this.playerChange.getValue();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var _this = this;\n\n        this.subscriptions.push(this.plyrInit.pipe(first()).subscribe(function (player) {\n          var reinitTriggers = [changes.plyrOptions, changes.plyrPlaysInline, changes.plyrCrossOrigin].filter(function (t) {\n            return !!t;\n          });\n\n          if (reinitTriggers.length) {\n            if (reinitTriggers.some(function (t) {\n              return !t.firstChange;\n            })) {\n              _this.initPlyr(true);\n            }\n          } else {\n            _this.updatePlyrSource(player);\n          }\n        }));\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroyPlayer();\n        this.subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        this.initPlyr();\n      }\n    }, {\n      key: \"initPlyr\",\n      value: function initPlyr() {\n        var _this2 = this;\n\n        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (force || !this.player) {\n          this.ngZone.runOutsideAngular(function () {\n            _this2.destroyPlayer();\n\n            _this2.driver = _this2.plyrDriver || new DefaultPlyrDriver();\n\n            _this2.ensureVideoElement();\n\n            var newPlayer = _this2.driver.create({\n              videoElement: _this2.videoElement,\n              options: _this2.plyrOptions\n            });\n\n            _this2.updatePlyrSource(newPlayer);\n\n            _this2.playerChange.next(newPlayer);\n          });\n        }\n      }\n    }, {\n      key: \"updatePlyrSource\",\n      value: function updatePlyrSource(plyr) {\n        this.driver.updateSource({\n          videoElement: this.videoElement,\n          plyr: plyr,\n          source: {\n            type: this.plyrType,\n            title: this.plyrTitle,\n            sources: this.plyrSources,\n            poster: this.plyrPoster,\n            tracks: this.plyrTracks\n          }\n        });\n      } // see https://stackoverflow.com/a/53704102/1990451\n\n    }, {\n      key: \"createLazyEvent\",\n      value: function createLazyEvent(name) {\n        var _this3 = this;\n\n        return this.plyrInit.pipe(switchMap(function () {\n          return new Observable(function (observer) {\n            return _this3.on(name, function (data) {\n              return _this3.ngZone.run(function () {\n                return observer.next(data);\n              });\n            });\n          });\n        }));\n      }\n    }, {\n      key: \"destroyPlayer\",\n      value: function destroyPlayer() {\n        var _this4 = this;\n\n        if (this.player) {\n          Array.from(this.events.keys()).forEach(function (name) {\n            return _this4.off(name);\n          });\n          this.driver.destroy({\n            plyr: this.player\n          });\n          this.videoElement = null;\n        }\n      }\n    }, {\n      key: \"hostElement\",\n      get: function get() {\n        return this.elementRef.nativeElement;\n      } // this method is required because the plyr inserts clone of the original element on destroy\n      // so we catch the clone element right here and reuse it\n\n    }, {\n      key: \"ensureVideoElement\",\n      value: function ensureVideoElement() {\n        var videoElement = this.hostElement.querySelector('video');\n\n        if (videoElement) {\n          this.videoElement = videoElement;\n        } else {\n          this.videoElement = this.renderer.createElement('video');\n          this.videoElement.controls = true;\n\n          if (this.plyrCrossOrigin) {\n            this.videoElement.setAttribute('crossorigin', '');\n          }\n\n          if (this.plyrPlaysInline) {\n            this.videoElement.setAttribute('playsinline', '');\n          }\n\n          this.renderer.appendChild(this.hostElement, this.videoElement);\n        }\n      }\n    }, {\n      key: \"on\",\n      value: function on(name, handler) {\n        this.events.set(name, handler);\n        this.player.on(name, handler);\n      }\n    }, {\n      key: \"off\",\n      value: function off(name) {\n        this.player.off(name, this.events.get(name));\n        this.events.delete(name);\n      }\n    }]);\n\n    return PlyrComponent;\n  }();\n\n  PlyrComponent.ɵfac = function PlyrComponent_Factory(t) {\n    return new (t || PlyrComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  PlyrComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PlyrComponent,\n    selectors: [[\"plyr\"], [\"\", \"plyr\", \"\"]],\n    viewQuery: function PlyrComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.vr = _t.first);\n      }\n    },\n    inputs: {\n      plyrType: \"plyrType\",\n      plyrDriver: \"plyrDriver\",\n      plyrTitle: \"plyrTitle\",\n      plyrPoster: \"plyrPoster\",\n      plyrSources: \"plyrSources\",\n      plyrTracks: \"plyrTracks\",\n      plyrOptions: \"plyrOptions\",\n      plyrCrossOrigin: \"plyrCrossOrigin\",\n      plyrPlaysInline: \"plyrPlaysInline\"\n    },\n    outputs: {\n      plyrInit: \"plyrInit\",\n      plyrProgress: \"plyrProgress\",\n      plyrPlaying: \"plyrPlaying\",\n      plyrPlay: \"plyrPlay\",\n      plyrPause: \"plyrPause\",\n      plyrTimeUpdate: \"plyrTimeUpdate\",\n      plyrVolumeChange: \"plyrVolumeChange\",\n      plyrSeeking: \"plyrSeeking\",\n      plyrSeeked: \"plyrSeeked\",\n      plyrRateChange: \"plyrRateChange\",\n      plyrEnded: \"plyrEnded\",\n      plyrEnterFullScreen: \"plyrEnterFullScreen\",\n      plyrExitFullScreen: \"plyrExitFullScreen\",\n      plyrCaptionsEnabled: \"plyrCaptionsEnabled\",\n      plyrCaptionsDisabled: \"plyrCaptionsDisabled\",\n      plyrLanguageChange: \"plyrLanguageChange\",\n      plyrControlsHidden: \"plyrControlsHidden\",\n      plyrControlsShown: \"plyrControlsShown\",\n      plyrReady: \"plyrReady\",\n      plyrLoadStart: \"plyrLoadStart\",\n      plyrLoadedData: \"plyrLoadedData\",\n      plyrLoadedMetadata: \"plyrLoadedMetadata\",\n      plyrQualityChange: \"plyrQualityChange\",\n      plyrCanPlay: \"plyrCanPlay\",\n      plyrCanPlayThrough: \"plyrCanPlayThrough\",\n      plyrStalled: \"plyrStalled\",\n      plyrWaiting: \"plyrWaiting\",\n      plyrEmptied: \"plyrEmptied\",\n      plyrCueChange: \"plyrCueChange\",\n      plyrError: \"plyrError\",\n      plyrStateChange: \"plyrStateChange\"\n    },\n    exportAs: [\"plyr\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function PlyrComponent_Template(rf, ctx) {},\n    styles: [\"\"]\n  });\n  PlyrComponent = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, Renderer2])], PlyrComponent);\n  return PlyrComponent;\n}();\n\nvar PlyrModule = /*@__PURE__*/function () {\n  var PlyrModule = function PlyrModule() {\n    _classCallCheck(this, PlyrModule);\n  };\n\n  PlyrModule.ɵfac = function PlyrModule_Factory(t) {\n    return new (t || PlyrModule)();\n  };\n\n  PlyrModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PlyrModule\n  });\n  PlyrModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return PlyrModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PlyrModule, {\n    declarations: [PlyrComponent],\n    exports: [PlyrComponent]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DefaultPlyrDriver, PlyrComponent, PlyrModule }; //# sourceMappingURL=ngx-plyr.js.map","map":null,"metadata":{},"sourceType":"module"}