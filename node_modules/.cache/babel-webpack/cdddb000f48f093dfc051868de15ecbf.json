{"ast":null,"code":"import _inherits from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function takeUntil(notifier) {\n  return function (source) {\n    return source.lift(new TakeUntilOperator(notifier));\n  };\n}\n\nvar TakeUntilOperator = /*#__PURE__*/function () {\n  function TakeUntilOperator(notifier) {\n    _classCallCheck(this, TakeUntilOperator);\n\n    this.notifier = notifier;\n  }\n\n  _createClass(TakeUntilOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n      var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n\n      if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n        takeUntilSubscriber.add(notifierSubscription);\n        return source.subscribe(takeUntilSubscriber);\n      }\n\n      return takeUntilSubscriber;\n    }\n  }]);\n\n  return TakeUntilOperator;\n}();\n\nvar TakeUntilSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(TakeUntilSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(TakeUntilSubscriber);\n\n  function TakeUntilSubscriber(destination) {\n    var _this;\n\n    _classCallCheck(this, TakeUntilSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.seenValue = false;\n    return _this;\n  }\n\n  _createClass(TakeUntilSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.seenValue = true;\n      this.complete();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {}\n  }]);\n\n  return TakeUntilSubscriber;\n}(OuterSubscriber); //# sourceMappingURL=takeUntil.js.map","map":{"version":3,"sources":["/Users/mac/Apps/sr-manager/frontend/node_modules/rxjs/_esm2015/internal/operators/takeUntil.js"],"names":["OuterSubscriber","subscribeToResult","takeUntil","notifier","source","lift","TakeUntilOperator","subscriber","takeUntilSubscriber","TakeUntilSubscriber","notifierSubscription","seenValue","add","subscribe","destination","outerValue","innerValue","outerIndex","innerIndex","innerSub","complete"],"mappings":";;;;AAAA,SAAQA,eAAR,QAA8B,oBAA9B;AACA,SAAQC,iBAAR,QAAgC,2BAAhC;AAEA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAChC,SAAO,UAACC,MAAD;AAAA,WAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBH,QAAtB,CAAZ,CAAZ;AAAA,GAAP;AACH;;IAEKG,iB;AACF,6BAAYH,QAAZ,EAAsB;AAAA;;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;;;WAED,cAAKI,UAAL,EAAiBH,MAAjB,EAAyB;AACrB,UAAMI,mBAAmB,GAAG,IAAIC,mBAAJ,CAAwBF,UAAxB,CAA5B;AACA,UAAMG,oBAAoB,GAAGT,iBAAiB,CAACO,mBAAD,EAAsB,KAAKL,QAA3B,CAA9C;;AACA,UAAIO,oBAAoB,IAAI,CAACF,mBAAmB,CAACG,SAAjD,EAA4D;AACxDH,QAAAA,mBAAmB,CAACI,GAApB,CAAwBF,oBAAxB;AACA,eAAON,MAAM,CAACS,SAAP,CAAiBL,mBAAjB,CAAP;AACH;;AACD,aAAOA,mBAAP;AACH;;;;;;IAGCC,mB;;;;;AACF,+BAAYK,WAAZ,EAAyB;AAAA;;AAAA;;AACrB,8BAAMA,WAAN;AACA,UAAKH,SAAL,GAAiB,KAAjB;AAFqB;AAGxB;;;;WAED,oBAAWI,UAAX,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqE;AACjE,WAAKR,SAAL,GAAiB,IAAjB;AACA,WAAKS,QAAL;AACH;;;WAED,0BAAiB,CAChB;;;;EAZ6BpB,e,GAelC","sourcesContent":["import {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\nexport function takeUntil(notifier) {\n    return (source) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n\n    call(subscriber, source) {\n        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        const notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    }\n}\n\nclass TakeUntilSubscriber extends OuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.seenValue = false;\n    }\n\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.seenValue = true;\n        this.complete();\n    }\n\n    notifyComplete() {\n    }\n}\n\n//# sourceMappingURL=takeUntil.js.map\n"]},"metadata":{},"sourceType":"module"}