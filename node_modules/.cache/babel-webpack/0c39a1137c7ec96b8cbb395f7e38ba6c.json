{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Client } from '../client';\nimport { HeartbeatInfo } from './heartbeat-info';\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\n\nexport var CompatClient = /*#__PURE__*/function (_Client) {\n  _inherits(CompatClient, _Client);\n\n  var _super = _createSuper(CompatClient);\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   *\n   * @internal\n   */\n  function CompatClient(webSocketFactory) {\n    var _this;\n\n    _classCallCheck(this, CompatClient);\n\n    _this = _super.call(this);\n    /**\n     * It is no op now. No longer needed. Large packets work out of the box.\n     */\n\n    _this.maxWebSocketFrameSize = 16 * 1024;\n    _this._heartbeatInfo = new HeartbeatInfo(_assertThisInitialized(_this));\n    _this.reconnect_delay = 0;\n    _this.webSocketFactory = webSocketFactory; // Default from previous version\n\n    _this.debug = function () {\n      var _console;\n\n      (_console = console).log.apply(_console, arguments);\n    };\n\n    return _this;\n  }\n\n  _createClass(CompatClient, [{\n    key: \"_parseConnect\",\n    value: function _parseConnect() {\n      var closeEventCallback;\n      var connectCallback;\n      var errorCallback;\n      var headers = {};\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args.length < 2) {\n        throw new Error('Connect requires at least 2 arguments');\n      }\n\n      if (typeof args[1] === 'function') {\n        headers = args[0];\n        connectCallback = args[1];\n        errorCallback = args[2];\n        closeEventCallback = args[3];\n      } else {\n        switch (args.length) {\n          case 6:\n            headers.login = args[0];\n            headers.passcode = args[1];\n            connectCallback = args[2];\n            errorCallback = args[3];\n            closeEventCallback = args[4];\n            headers.host = args[5];\n            break;\n\n          default:\n            headers.login = args[0];\n            headers.passcode = args[1];\n            connectCallback = args[2];\n            errorCallback = args[3];\n            closeEventCallback = args[4];\n        }\n      }\n\n      return [headers, connectCallback, errorCallback, closeEventCallback];\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n     *\n     * **Deprecated**\n     *\n     * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n     * version with headers to pass your broker specific options.\n     *\n     * overloads:\n     * - connect(headers, connectCallback)\n     * - connect(headers, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback)\n     * - connect(login, passcode, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n     *\n     * params:\n     * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n     * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n     * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n     * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n     * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var out = this._parseConnect.apply(this, arguments);\n\n      if (out[0]) {\n        this.connectHeaders = out[0];\n      }\n\n      if (out[1]) {\n        this.onConnect = out[1];\n      }\n\n      if (out[2]) {\n        this.onStompError = out[2];\n      }\n\n      if (out[3]) {\n        this.onWebSocketClose = out[3];\n      }\n\n      _get(_getPrototypeOf(CompatClient.prototype), \"activate\", this).call(this);\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n     *\n     * **Deprecated**\n     *\n     * See:\n     * [Client#onDisconnect]{@link Client#onDisconnect}, and\n     * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(disconnectCallback) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (disconnectCallback) {\n        this.onDisconnect = disconnectCallback;\n      }\n\n      this.disconnectHeaders = headers;\n\n      _get(_getPrototypeOf(CompatClient.prototype), \"deactivate\", this).call(this);\n    }\n    /**\n     * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n     *\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations. The headers will, typically, be available to the subscriber.\n     * However, there may be special purpose headers corresponding to your STOMP broker.\n     *\n     *  **Deprecated**, use [Client#publish]{@link Client#publish}\n     *\n     * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n     *\n     * ```javascript\n     *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n     *\n     *        // If you want to send a message with a body, you must also pass the headers argument.\n     *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n     * ```\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(destination) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      headers = Object.assign({}, headers);\n      var skipContentLengthHeader = headers['content-length'] === false;\n\n      if (skipContentLengthHeader) {\n        delete headers['content-length'];\n      }\n\n      this.publish({\n        destination: destination,\n        headers: headers,\n        body: body,\n        skipContentLengthHeader: skipContentLengthHeader\n      });\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"reconnect_delay\",\n    set: function set(value) {\n      this.reconnectDelay = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"ws\",\n    get: function get() {\n      return this.webSocket;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this.connectedVersion;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"onreceive\",\n    get: function get() {\n      return this.onUnhandledMessage;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    ,\n    set: function set(value) {\n      this.onUnhandledMessage = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"onreceipt\",\n    get: function get() {\n      return this.onUnhandledReceipt;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     *\n     * **Deprecated**\n     */\n    ,\n    set: function set(value) {\n      this.onUnhandledReceipt = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"heartbeat\",\n    get: function get() {\n      return this._heartbeatInfo;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    ,\n    set: function set(value) {\n      this.heartbeatIncoming = value.incoming;\n      this.heartbeatOutgoing = value.outgoing;\n    }\n  }]);\n\n  return CompatClient;\n}(Client); //# sourceMappingURL=compat-client.js.map","map":{"version":3,"sources":["/Users/mac/Apps/sr-manager/frontend/node_modules/@stomp/stompjs/esm6/compatibility/compat-client.js"],"names":["Client","HeartbeatInfo","CompatClient","webSocketFactory","maxWebSocketFrameSize","_heartbeatInfo","reconnect_delay","debug","console","log","closeEventCallback","connectCallback","errorCallback","headers","args","length","Error","login","passcode","host","out","_parseConnect","connectHeaders","onConnect","onStompError","onWebSocketClose","disconnectCallback","onDisconnect","disconnectHeaders","destination","body","Object","assign","skipContentLengthHeader","publish","value","reconnectDelay","webSocket","connectedVersion","onUnhandledMessage","onUnhandledReceipt","heartbeatIncoming","incoming","heartbeatOutgoing","outgoing"],"mappings":"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","sourcesContent":["import { Client } from '../client';\nimport { HeartbeatInfo } from './heartbeat-info';\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\nexport class CompatClient extends Client {\n    /**\n     * Available for backward compatibility, please shift to using {@link Client}\n     * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     *\n     * **Deprecated**\n     *\n     * @internal\n     */\n    constructor(webSocketFactory) {\n        super();\n        /**\n         * It is no op now. No longer needed. Large packets work out of the box.\n         */\n        this.maxWebSocketFrameSize = 16 * 1024;\n        this._heartbeatInfo = new HeartbeatInfo(this);\n        this.reconnect_delay = 0;\n        this.webSocketFactory = webSocketFactory;\n        // Default from previous version\n        this.debug = (...message) => {\n            console.log(...message);\n        };\n    }\n    _parseConnect(...args) {\n        let closeEventCallback;\n        let connectCallback;\n        let errorCallback;\n        let headers = {};\n        if (args.length < 2) {\n            throw new Error('Connect requires at least 2 arguments');\n        }\n        if (typeof args[1] === 'function') {\n            [headers, connectCallback, errorCallback, closeEventCallback] = args;\n        }\n        else {\n            switch (args.length) {\n                case 6:\n                    [\n                        headers.login,\n                        headers.passcode,\n                        connectCallback,\n                        errorCallback,\n                        closeEventCallback,\n                        headers.host,\n                    ] = args;\n                    break;\n                default:\n                    [\n                        headers.login,\n                        headers.passcode,\n                        connectCallback,\n                        errorCallback,\n                        closeEventCallback,\n                    ] = args;\n            }\n        }\n        return [headers, connectCallback, errorCallback, closeEventCallback];\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n     *\n     * **Deprecated**\n     *\n     * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n     * version with headers to pass your broker specific options.\n     *\n     * overloads:\n     * - connect(headers, connectCallback)\n     * - connect(headers, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback)\n     * - connect(login, passcode, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n     *\n     * params:\n     * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n     * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n     * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n     * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n     * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    connect(...args) {\n        const out = this._parseConnect(...args);\n        if (out[0]) {\n            this.connectHeaders = out[0];\n        }\n        if (out[1]) {\n            this.onConnect = out[1];\n        }\n        if (out[2]) {\n            this.onStompError = out[2];\n        }\n        if (out[3]) {\n            this.onWebSocketClose = out[3];\n        }\n        super.activate();\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n     *\n     * **Deprecated**\n     *\n     * See:\n     * [Client#onDisconnect]{@link Client#onDisconnect}, and\n     * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    disconnect(disconnectCallback, headers = {}) {\n        if (disconnectCallback) {\n            this.onDisconnect = disconnectCallback;\n        }\n        this.disconnectHeaders = headers;\n        super.deactivate();\n    }\n    /**\n     * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n     *\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations. The headers will, typically, be available to the subscriber.\n     * However, there may be special purpose headers corresponding to your STOMP broker.\n     *\n     *  **Deprecated**, use [Client#publish]{@link Client#publish}\n     *\n     * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n     *\n     * ```javascript\n     *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n     *\n     *        // If you want to send a message with a body, you must also pass the headers argument.\n     *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n     * ```\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    send(destination, headers = {}, body = '') {\n        headers = Object.assign({}, headers);\n        const skipContentLengthHeader = headers['content-length'] === false;\n        if (skipContentLengthHeader) {\n            delete headers['content-length'];\n        }\n        this.publish({\n            destination,\n            headers: headers,\n            body,\n            skipContentLengthHeader,\n        });\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n     *\n     * **Deprecated**\n     */\n    set reconnect_delay(value) {\n        this.reconnectDelay = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n     *\n     * **Deprecated**\n     */\n    get ws() {\n        return this.webSocket;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n     *\n     * **Deprecated**\n     */\n    get version() {\n        return this.connectedVersion;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    get onreceive() {\n        return this.onUnhandledMessage;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    set onreceive(value) {\n        this.onUnhandledMessage = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n     *\n     * **Deprecated**\n     */\n    get onreceipt() {\n        return this.onUnhandledReceipt;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     *\n     * **Deprecated**\n     */\n    set onreceipt(value) {\n        this.onUnhandledReceipt = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    get heartbeat() {\n        return this._heartbeatInfo;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    set heartbeat(value) {\n        this.heartbeatIncoming = value.incoming;\n        this.heartbeatOutgoing = value.outgoing;\n    }\n}\n//# sourceMappingURL=compat-client.js.map"]},"metadata":{},"sourceType":"module"}