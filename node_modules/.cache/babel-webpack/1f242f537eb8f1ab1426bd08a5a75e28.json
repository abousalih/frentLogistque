{"ast":null,"code":"// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\n// and https://github.com/bpampuch/pdfmake/issues/205\n\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\n\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Boolean} [removeExtraBlanks=false] Some blank spaces in your code may cause extra blank lines in the PDF – use this option to remove them\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\n//var util = require(\"util\"); // to debug\nfunction htmlToPdfMake(htmlText, options) {\n  'use strict';\n\n  this.wndw = options && options.window ? options.window : window;\n  this.tableAutoSize = options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false;\n  this.imagesByReference = options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false;\n  this.removeExtraBlanks = options && typeof options.removeExtraBlanks === \"boolean\" ? options.removeExtraBlanks : false; // Used with the size attribute on the font elements to calculate relative font size\n\n  this.fontSizes = options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]; // set default styles\n\n  this.defaultStyles = {\n    b: {\n      bold: true\n    },\n    strong: {\n      bold: true\n    },\n    u: {\n      decoration: 'underline'\n    },\n    del: {\n      decoration: 'lineThrough'\n    },\n    s: {\n      decoration: 'lineThrough'\n    },\n    em: {\n      italics: true\n    },\n    i: {\n      italics: true\n    },\n    h1: {\n      fontSize: 24,\n      bold: true,\n      marginBottom: 5\n    },\n    h2: {\n      fontSize: 22,\n      bold: true,\n      marginBottom: 5\n    },\n    h3: {\n      fontSize: 20,\n      bold: true,\n      marginBottom: 5\n    },\n    h4: {\n      fontSize: 18,\n      bold: true,\n      marginBottom: 5\n    },\n    h5: {\n      fontSize: 16,\n      bold: true,\n      marginBottom: 5\n    },\n    h6: {\n      fontSize: 14,\n      bold: true,\n      marginBottom: 5\n    },\n    a: {\n      color: 'blue',\n      decoration: 'underline'\n    },\n    strike: {\n      decoration: 'lineThrough'\n    },\n    p: {\n      margin: [0, 5, 0, 10]\n    },\n    ul: {\n      marginBottom: 5,\n      marginLeft: 5\n    },\n    table: {\n      marginBottom: 5\n    },\n    th: {\n      bold: true,\n      fillColor: '#EEEEEE'\n    }\n  }; // store the references to the images\n\n  this.imagesRef = [];\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\n\n  this.changeDefaultStyles = function () {\n    for (var keyStyle in options.defaultStyles) {\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\n        // if we want to remove a default style\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\n          delete this.defaultStyles[keyStyle];\n        } else {\n          for (var k in options.defaultStyles[keyStyle]) {\n            // if we want to delete a specific property\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\n          }\n        }\n      } else {\n        // if we add default styles\n        this.defaultStyles[keyStyle] = {};\n\n        for (var ks in options.defaultStyles[keyStyle]) {\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\n        }\n      }\n    }\n  };\n\n  if (options && options.defaultStyles) {\n    this.changeDefaultStyles();\n  }\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\n\n\n  this.convertHtml = function (htmlText) {\n    // Create a HTML DOM tree out of html string\n    var parser = new this.wndw.DOMParser();\n    if (this.removeExtraBlanks) htmlText = htmlText.replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li))/gi, \"$1$4\").replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li))/gi, \"$1$4\");\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\n    var docDef = this.parseElement(parsedHtml.body, []); // remove first level\n\n    return docDef.stack || docDef.text;\n  };\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\n\n\n  this.parseElement = function (element, parents) {\n    var nodeName = element.nodeName.toUpperCase();\n    var nodeNameLowerCase = nodeName.toLowerCase();\n    var ret = {\n      text: []\n    };\n    var text,\n        needStack = false;\n\n    var dataset,\n        i,\n        key,\n        _this = this; // ignore some HTML tags\n\n\n    if (['COLGROUP', 'COL'].indexOf(nodeName) > -1) return '';\n\n    switch (element.nodeType) {\n      case 3:\n        {\n          // TEXT_NODE\n          if (element.textContent) {\n            text = element.textContent; // check if we have 'white-space' in the parent's style\n\n            var styleParentTextNode = this.parseStyle(parents[parents.length - 1], true);\n            var hasWhiteSpace = false;\n\n            for (i = 0; i < styleParentTextNode.length; i++) {\n              if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\n                hasWhiteSpace = styleParentTextNode[i].value;\n                break;\n              }\n            } // if no 'white-space' style, then deal with white spaces\n\n\n            if (!hasWhiteSpace) text = text.replace(/\\s*\\n\\s*/g, \" \");\n            if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents); // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\n\n            if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR', 'UL', 'OL'].indexOf(parents[parents.length - 1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n            if (text) {\n              ret = {\n                'text': text\n              };\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n              return ret;\n            }\n          }\n\n          return '';\n        }\n\n      case 1:\n        {\n          // ELEMENT_NODE\n          ret.nodeName = nodeName;\n          if (element.id) ret.id = element.id;\n          parents.push(element);\n\n          if (element.childNodes && element.childNodes.length > 0) {\n            [].forEach.call(element.childNodes, function (child) {\n              var res = _this.parseElement(child, parents);\n\n              if (res) {\n                if (Array.isArray(res.text) && res.text.length === 0) res.text = '';\n                ret.text.push(res);\n              }\n            }); //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\n            // find if we need a 'stack' instead of a 'text'\n\n            needStack = this.searchForStack(ret);\n\n            if (needStack) {\n              ret.stack = ret.text.slice(0);\n              delete ret.text;\n            } else {\n              // apply all the inhirent classes and styles from the parents\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n            }\n          }\n\n          parents.pop();\n\n          switch (nodeName) {\n            case \"TABLE\":\n              {\n                var rowIndex, cellIndex; // the format for the table is table.body[[], [], …]\n\n                ret.table = {\n                  body: []\n                };\n                var tbodies = ret.stack || ret.text;\n\n                if (Array.isArray(tbodies)) {\n                  rowIndex = 0; // Array with All Rows including THEAD\n\n                  var allRows = []; // for each THEAD / TBODY\n\n                  tbodies.forEach(function (tbody) {\n                    // for each row\n                    var rows = tbody.stack || tbody.text;\n\n                    if (Array.isArray(rows)) {\n                      // Add rows to allRows\n                      allRows = allRows.concat(rows);\n                      rows.forEach(function (row) {\n                        var cells = row.stack || row.text; // for each cell\n\n                        if (Array.isArray(cells)) {\n                          cellIndex = 0;\n                          ret.table.body[rowIndex] = [];\n                          cells.forEach(function (cell) {\n                            ret.table.body[rowIndex].push(cell); // do we have a colSpan?\n                            // if yes, insert empty cells due to colspan\n\n                            if (cell.colSpan > 1) {\n                              i = cell.colSpan; // do we have a rowSpan in addition of the colSpan?\n\n                              _this.setRowSpan({\n                                rows: allRows,\n                                cell: cell,\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex\n                              });\n\n                              while (--i > 0) {\n                                ret.table.body[rowIndex].push({\n                                  text: ''\n                                }); // keep adding empty cell due to rowspan\n\n                                _this.setRowSpan({\n                                  rows: allRows,\n                                  cell: cell,\n                                  rowIndex: rowIndex,\n                                  cellIndex: cellIndex\n                                });\n\n                                cellIndex++;\n                              }\n                            } else {\n                              // do we have a rowSpan ?\n                              _this.setRowSpan({\n                                rows: allRows,\n                                cell: cell,\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex\n                              });\n                            }\n\n                            cellIndex++;\n                          });\n                          rowIndex++;\n                        }\n                      });\n                    }\n                  });\n                }\n\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                }); // if option tableAutoSize, then we try to apply the correct width/height on the table\n\n                if (this.tableAutoSize) {\n                  var cellsWidths = [];\n                  var cellsHeights = [];\n                  var tableWidths = [];\n                  var tableHeights = []; // determine if we have \"width:100%\" on the TABLE\n\n                  var fullWidth = element.getAttribute(\"width\") === \"100%\" || (element.getAttribute(\"style\") || \"\").replace(/width\\s*:\\s*100%/, \"width:100%\").includes(\"width:100%\");\n                  ret.table.body.forEach(function (row, rowIndex) {\n                    cellsWidths.push([]);\n                    cellsHeights.push([]);\n                    row.forEach(function (cell) {\n                      // we want to remember the different sizes\n                      var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\n                      var height = typeof cell.height !== 'undefined' ? cell.height : 'auto'; // check if we have colspan or rowspan\n                      // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\n\n                      if (width !== 'auto' && cell.colSpan > 1) {\n                        if (!isNaN(width)) width /= cell.colSpan;else width = 'auto';\n                      }\n\n                      if (height !== 'auto' && cell.rowSpan > 1) {\n                        if (!isNaN(height)) height /= cell.rowSpan;else height = 'auto';\n                      }\n\n                      cellsWidths[rowIndex].push(width);\n                      cellsHeights[rowIndex].push(height);\n                    });\n                  }); // determine the max width for each cell\n\n                  cellsWidths.forEach(function (row) {\n                    row.forEach(function (cellWidth, cellIndex) {\n                      var type = typeof tableWidths[cellIndex];\n\n                      if (type === \"undefined\" || cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex] || cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto') {\n                        tableWidths[cellIndex] = cellWidth;\n                      }\n                    });\n                  }); // determine the max height for each row\n\n                  cellsHeights.forEach(function (row, rowIndex) {\n                    row.forEach(function (cellHeight) {\n                      var type = typeof tableHeights[rowIndex];\n\n                      if (type === \"undefined\" || cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex] || cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto') {\n                        tableHeights[rowIndex] = cellHeight;\n                      }\n                    });\n                  });\n\n                  if (tableWidths.length > 0) {\n                    // if all columns are in 'auto' and if we have 'width:\"100%\"' for the table\n                    // then put widths:['*', '*' …], for all columns\n                    //if (fullWidth && tableWidths.filter(function(w) { return w==='auto' }).length === tableWidths.length) tableWidths=tableWidths.map(function() { return '*' });\n                    // see https://github.com/Aymkdn/html-to-pdfmake/issues/151#issuecomment-1273015585\n                    // if we have 'width:\"100%\"' for the table, replace \"auto\" width to \"*\"\n                    if (fullWidth) tableWidths = tableWidths.map(function (w) {\n                      return w === 'auto' ? '*' : w;\n                    });\n                    ret.table.widths = tableWidths;\n                  }\n\n                  if (tableHeights.length > 0) ret.table.heights = tableHeights;\n                } // check if we have some data-pdfmake to apply\n\n\n                if (element.dataset && element.dataset.pdfmake) {\n                  // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\n                  dataset = element.dataset.pdfmake;\n                  if (dataset.charAt(1) === \"'\") dataset = dataset.replace(/'/g, '\"');\n\n                  try {\n                    dataset = JSON.parse(dataset);\n\n                    for (key in dataset) {\n                      if (key === \"layout\") {\n                        ret.layout = dataset[key];\n                      } else {\n                        ret.table[key] = dataset[key];\n                      }\n                    }\n                  } catch (e) {\n                    console.error(e);\n                  }\n                }\n\n                break;\n              }\n\n            case \"TH\":\n            case \"TD\":\n              {\n                if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\") * 1;\n                if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\") * 1; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            case \"SVG\":\n              {\n                ret = {\n                  svg: element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\n                  nodeName: 'SVG',\n                  style: ['html-svg']\n                };\n                break;\n              }\n\n            case \"BR\":\n              {\n                // for BR we return '\\n'\n                ret.text = [{\n                  text: '\\n'\n                }];\n                break;\n              }\n\n            case \"SUB\":\n            case \"SUP\":\n              {\n                ret[nodeName.toLowerCase()] = {\n                  offset: '30%',\n                  fontSize: 8\n                };\n                break;\n              }\n\n            case \"HR\":\n              {\n                // default style for the HR\n                var styleHR = {\n                  width: 514,\n                  type: \"line\",\n                  margin: [0, 12, 0, 12],\n                  thickness: 0.5,\n                  color: \"#000000\",\n                  left: 0\n                }; // we can override the default HR style with \"data-pdfmake\"\n\n                if (element.dataset && element.dataset.pdfmake) {\n                  dataset = JSON.parse(element.dataset.pdfmake);\n\n                  for (key in dataset) {\n                    styleHR[key] = dataset[key];\n                  }\n                }\n\n                ret.margin = styleHR.margin;\n                ret.canvas = [{\n                  type: styleHR.type,\n                  x1: styleHR.left,\n                  y1: 0,\n                  x2: styleHR.width,\n                  y2: 0,\n                  lineWidth: styleHR.thickness,\n                  lineColor: styleHR.color\n                }];\n                delete ret.text;\n                break;\n              }\n\n            case \"OL\":\n            case \"UL\":\n              {\n                ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                }); // check if we have `start`\n\n                if (element.getAttribute(\"start\")) {\n                  ret.start = element.getAttribute(\"start\") * 1;\n                } // check if we have \"type\"\n\n\n                switch (element.getAttribute(\"type\")) {\n                  case 'A':\n                    ret.type = 'upper-alpha';\n                    break;\n\n                  case 'a':\n                    ret.type = 'lower-alpha';\n                    break;\n\n                  case 'I':\n                    ret.type = 'upper-roman';\n                    break;\n\n                  case 'i':\n                    ret.type = 'lower-roman';\n                    break;\n                } // check if we have `list-style-type` or `list-style`\n\n\n                if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\n                break;\n              }\n\n            case \"LI\":\n              {\n                // if it's a stack, then check if the last child has a \"text\"\n                if (ret.stack && !ret.stack[ret.stack.length - 1].text) {\n                  // if not, we restructure our node\n                  text = ret.stack.slice(0, -1);\n                  ret = [{\n                    \"text\": text\n                  }, ret.stack[ret.stack.length - 1]];\n                } // we don't want a child of UL/OL to be an array, but it should be a \"stack\"\n\n\n                if (Array.isArray(ret)) {\n                  ret = {\n                    stack: ret\n                  };\n                }\n\n                break;\n              }\n\n            case \"IMG\":\n              {\n                if (this.imagesByReference) {\n                  var src = element.getAttribute(\"src\");\n                  var index = this.imagesRef.indexOf(src);\n                  if (index > -1) ret.image = 'img_ref_' + index;else {\n                    ret.image = 'img_ref_' + this.imagesRef.length;\n                    this.imagesRef.push(src);\n                  }\n                } else {\n                  ret.image = element.getAttribute(\"src\");\n                }\n\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            case \"A\":\n              {\n                // the link must be applied to the deeper `text`\n                var setLink = function setLink(pointer, href) {\n                  pointer = pointer || {\n                    text: ''\n                  }; // for link without any text\n\n                  if (Array.isArray(pointer.text)) {\n                    return setLink(pointer.text[0], href);\n                  } // if 'href' starts with '#' then it's an internal link\n\n\n                  if (href.indexOf('#') === 0) pointer.linkToDestination = href.slice(1);else pointer.link = href;\n                  pointer.nodeName = \"A\";\n                  return pointer;\n                };\n\n                if (element.getAttribute(\"href\")) {\n                  ret = setLink(ret, element.getAttribute(\"href\"));\n                }\n\n                break;\n              }\n\n            default:\n              {\n                // handle other cases\n                if (options && typeof options.customTag === \"function\") {\n                  ret = options.customTag.call(this, {\n                    element: element,\n                    parents: parents,\n                    ret: ret\n                  });\n                }\n              }\n          } // reduce the number of JSON properties\n\n\n          if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\n            ret.text = ret.text[0].text;\n          } // check if we have some data-pdfmake to apply\n\n\n          if (['HR', 'TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\n            dataset = JSON.parse(element.dataset.pdfmake);\n\n            for (key in dataset) {\n              ret[key] = dataset[key];\n            }\n          }\n\n          return ret;\n        }\n    }\n  };\n\n  this.searchForStack = function (ret) {\n    if (Array.isArray(ret.text)) {\n      for (var i = 0; i < ret.text.length; i++) {\n        if (ret.text[i].stack || ['P', 'DIV', 'TABLE', 'SVG', 'UL', 'OL', 'IMG', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(ret.text[i].nodeName) > -1) return true;\n        if (this.searchForStack(ret.text[i]) === true) return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Add empty cells due to rowspan\r\n   *\r\n   * @param {Object} params\r\n   *   @param {Array} rows\r\n   *   @param {Object} cell\r\n   *   @param {Number} rowIndex Current row index\r\n   *   @param {Number} cellIndex Current cell index\r\n   */\n\n\n  this.setRowSpan = function (params) {\n    var cells;\n\n    if (params.cell.rowSpan) {\n      for (var i = 1; i <= params.cell.rowSpan - 1; i++) {\n        cells = params.rows[params.rowIndex + i].text || params.rows[params.rowIndex + i].stack;\n        cells.splice(params.cellIndex, 0, {\n          text: ''\n        });\n      }\n    }\n  };\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\n\n\n  this.applyStyle = function (params) {\n    var cssClass = [];\n    var lastIndex = params.parents.length - 1;\n\n    var _this = this;\n\n    params.parents.forEach(function (parent, parentIndex) {\n      // classes\n      var parentNodeName = parent.nodeName.toLowerCase();\n      var htmlClass = 'html-' + parentNodeName;\n      if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\n      var parentClass = (parent.getAttribute(\"class\") || \"\").split(' ');\n      parentClass.forEach(function (p) {\n        if (p) cssClass.push(p);\n      }); // styles\n\n      var style; // not all the CSS properties should be inherent\n\n      var ignoreNonDescendentProperties = parentIndex !== lastIndex; // 1) the default styles\n\n      if (_this.defaultStyles[parentNodeName]) {\n        for (style in _this.defaultStyles[parentNodeName]) {\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\n            if (!ignoreNonDescendentProperties || ignoreNonDescendentProperties && style.indexOf('margin') === -1 && style.indexOf('border') === -1) {\n              // 'decoration' can be an array\n              if (style === 'decoration') {\n                if (!Array.isArray(params.ret[style])) params.ret[style] = []; // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\n\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\n                }\n              } else {\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\n              }\n            }\n          }\n        }\n      } // 2) element's style\n      // we want TD/TH to receive descendant properties from TR\n\n\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties = false;\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\n      style.forEach(function (stl) {\n        // 'decoration' can be an array\n        if (stl.key === \"decoration\") {\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key] = [];\n          params.ret[stl.key].push(stl.value);\n        } else {\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\n          // then we should change the correct index in `params.ret.margin` to reflect it\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\n            // order: left | top | right | bottom\n            switch (stl.key) {\n              case \"marginLeft\":\n                params.ret.margin[0] = stl.value;\n                break;\n\n              case \"marginTop\":\n                params.ret.margin[1] = stl.value;\n                break;\n\n              case \"marginRight\":\n                params.ret.margin[2] = stl.value;\n                break;\n\n              case \"marginBottom\":\n                params.ret.margin[3] = stl.value;\n                break;\n            }\n          } else {\n            params.ret[stl.key] = stl.value;\n          }\n        }\n      });\n    });\n    params.ret.style = cssClass;\n    return params.ret;\n  };\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\n\n\n  this.parseStyle = function (element, ignoreProperties) {\n    var style = element.getAttribute(\"style\") || \"\";\n    var ret = [];\n    style = style.split(';'); // check if we have \"width\" or \"height\"\n\n    var width = element.getAttribute(\"width\");\n    var height = element.getAttribute(\"height\");\n\n    if (width) {\n      style.unshift(\"width:\" + this.convertToUnit(width + (isNaN(width) ? \"\" : \"px\")));\n    }\n\n    if (height) {\n      style.unshift(\"height:\" + this.convertToUnit(height + (isNaN(height) ? \"\" : \"px\")));\n    } // check if we have 'color' or 'size' -- mainly for '<font>'\n\n\n    var color = element.getAttribute(\"color\");\n\n    if (color) {\n      ret.push({\n        key: \"color\",\n        value: this.parseColor(color)\n      });\n    }\n\n    var size = element.getAttribute(\"size\");\n\n    if (size !== null) {\n      // Getting and sanitizing the size value: it should be included between 1 and 7\n      size = Math.min(Math.max(1, parseInt(size)), 7); // Assigning the font size\n\n      ret.push({\n        key: 'fontSize',\n        value: Math.max(this.fontSizes[0], this.fontSizes[size - 1])\n      });\n    }\n\n    var styleDefs = style.map(function (style) {\n      return style.toLowerCase().split(':');\n    });\n    var borders = []; // special treatment for borders\n\n    var nodeName = element.nodeName.toUpperCase();\n\n    var _this = this;\n\n    styleDefs.forEach(function (styleDef) {\n      if (styleDef.length === 2) {\n        var key = styleDef[0].trim();\n        var value = styleDef[1].trim();\n\n        switch (key) {\n          case \"margin\":\n            {\n              if (ignoreProperties) break; // pdfMake uses a different order than CSS\n\n              value = value.split(' ');\n              if (value.length === 1) value = [value[0], value[0], value[0], value[0]];else if (value.length === 2) value = [value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\n              else if (value.length === 3) value = [value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\n              else if (value.length === 4) value = [value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\n              // we now need to convert to PT\n\n              value.forEach(function (val, i) {\n                value[i] = _this.convertToUnit(val);\n              }); // ignore if we have a FALSE in the table\n\n              if (value.indexOf(false) === -1) ret.push({\n                key: key,\n                value: value\n              });\n              break;\n            }\n\n          case \"line-height\":\n            {\n              // change % unit\n              if (typeof value === \"string\" && value.slice(-1) === '%') {\n                value = value.slice(0, -1) / 100;\n              } else {\n                value = _this.convertToUnit(value);\n              }\n\n              ret.push({\n                key: \"lineHeight\",\n                value: value\n              });\n              break;\n            }\n\n          case \"text-align\":\n            {\n              ret.push({\n                key: \"alignment\",\n                value: value\n              });\n              break;\n            }\n\n          case \"font-weight\":\n            {\n              if (value === \"bold\") ret.push({\n                key: \"bold\",\n                value: true\n              });\n              break;\n            }\n\n          case \"text-decoration\":\n            {\n              ret.push({\n                key: \"decoration\",\n                value: _this.toCamelCase(value)\n              });\n              break;\n            }\n\n          case \"font-style\":\n            {\n              if (value === \"italic\") ret.push({\n                key: \"italics\",\n                value: true\n              });\n              break;\n            }\n\n          case \"font-family\":\n            {\n              ret.push({\n                key: \"font\",\n                value: value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g, \"\").replace(/^([a-z])/g, function (g) {\n                  return g[0].toUpperCase();\n                }).replace(/ ([a-z])/g, function (g) {\n                  return g[1].toUpperCase();\n                })\n              });\n              break;\n            }\n\n          case \"color\":\n            {\n              ret.push({\n                key: \"color\",\n                value: _this.parseColor(value)\n              });\n              break;\n            }\n\n          case \"background-color\":\n            {\n              // if TH/TD and key is 'background', then we use 'fillColor' instead\n              ret.push({\n                key: nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\",\n                value: _this.parseColor(value)\n              });\n              break;\n            }\n\n          case \"text-indent\":\n            {\n              ret.push({\n                key: \"leadingIndent\",\n                value: _this.convertToUnit(value)\n              });\n              break;\n            }\n\n          case \"white-space\":\n            {\n              ret.push({\n                key: \"preserveLeadingSpaces\",\n                value: value === 'break-spaces' || value.slice(0, 3) === 'pre'\n              });\n              break;\n            }\n\n          default:\n            {\n              // for borders\n              if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\n                if (!ignoreProperties) borders.push({\n                  key: key,\n                  value: value\n                });\n              } else {\n                // ignore some properties\n                if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break; // padding is not supported by PDFMake\n\n                if (key.indexOf(\"padding\") === 0) break;\n                if (key.indexOf(\"-\") > -1) key = _this.toCamelCase(key);\n\n                if (value) {\n                  // convert value to a 'pt' when possible\n                  var parsedValue = _this.convertToUnit(value); // if we have 'font-size' with a parsedValue at false, then ignore it\n\n\n                  if (key === 'font-size' && parsedValue === false) break;\n                  ret.push({\n                    key: key,\n                    value: parsedValue === false ? value : parsedValue\n                  });\n                }\n              }\n            }\n        }\n      }\n    }); // for borders\n\n    if (borders.length > 0) {\n      // we have to merge together the borders in two properties\n      var border = []; // array of boolean\n\n      var borderColor = []; // array of colors\n\n      borders.forEach(function (b) {\n        // we have 3 properties: width style color\n        var properties = b.value.split(' ');\n        var width = properties[0].replace(/(\\d*)(\\.\\d+)?([^\\d]+)/g, \"$1$2 \").trim();\n        var index = -1,\n            i;\n        if (b.key.indexOf('-left') > -1) index = 0;else if (b.key.indexOf('-top') > -1) index = 1;else if (b.key.indexOf('-right') > -1) index = 2;else if (b.key.indexOf('-bottom') > -1) index = 3; // for the width\n\n        if (index > -1) {\n          border[index] = width > 0;\n        } else {\n          for (i = 0; i < 4; i++) {\n            border[i] = width > 0;\n          }\n        } // for the color\n\n\n        if (properties.length > 2) {\n          var color = properties.slice(2).join(' ');\n\n          if (index > -1) {\n            borderColor[index] = _this.parseColor(color);\n          } else {\n            for (i = 0; i < 4; i++) {\n              borderColor[i] = _this.parseColor(color);\n            }\n          }\n        }\n      }); // fill the gaps\n\n      for (var i = 0; i < 4; i++) {\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i] = true;\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i] = '#000000';\n      }\n\n      if (border.length > 0) ret.push({\n        key: 'border',\n        value: border\n      });\n      if (borderColor.length > 0) ret.push({\n        key: 'borderColor',\n        value: borderColor\n      });\n    }\n\n    return ret;\n  };\n\n  this.toCamelCase = function (str) {\n    return str.replace(/-([a-z])/g, function (g) {\n      return g[1].toUpperCase();\n    });\n  }; // input: h in [0,360] and s,v in [0,1] - output: \"rgb(0–255,0–255,0–255)\"\"\n  // source: https://stackoverflow.com/a/54014428/1134119 + https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion#comment58413965_9493060\n\n\n  this.hsl2rgb = function (h, s, l) {\n    var a = s * Math.min(l, 1 - l);\n\n    var f = function f(n) {\n      var k = (n + h / 30) % 12;\n      return Math.min(Math.floor((l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1)) * 256), 255);\n    };\n\n    return \"rgb(\" + f(0) + \",\" + f(8) + \",\" + f(4) + \")\";\n  };\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\n\n\n  this.parseColor = function (color) {\n    // e.g. `#fff` or `#ff0048`\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$'); // e.g. rgb(0,255,34) or rgb(22, 0, 0) or rgb(100%, 100%, 100%)\n\n    var rgbRegex = new RegExp('^rgb\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$'); // e.g. hsl(300, 10%, 20%)\n\n    var hslRegex = new RegExp('^hsl\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$'); // e.g. \"white\" or \"red\"\n\n    var nameRegex = new RegExp('^[a-z]+$');\n    var decimalColors,\n        decimalValue,\n        hexString,\n        i,\n        ret = [];\n\n    if (haxRegex.test(color)) {\n      return color;\n    }\n\n    if (hslRegex.test(color)) {\n      // we want to convert to RGB\n      decimalColors = hslRegex.exec(color).slice(1); // first value should be from 0 to 360\n\n      if (decimalColors[0].endsWith('%')) decimalValue = decimalColors[0].slice(0, -1) * 360 / 100;else decimalValue = decimalColors[0] * 1;\n      ret.push(decimalValue); // next values should be % to convert to base 1\n\n      ret.push(decimalColors[2].slice(0, -1) / 100);\n      ret.push(decimalColors[4].slice(0, -1) / 100);\n      color = this.hsl2rgb(ret[0], ret[1], ret[2]);\n      ret = [];\n    }\n\n    if (rgbRegex.test(color)) {\n      decimalColors = rgbRegex.exec(color).slice(1);\n\n      for (i = 0; i < 6; i += 2) {\n        decimalValue = decimalColors[i]; // if it ends with '%', we calculcate based on 100%=255\n\n        if (decimalValue.endsWith('%')) {\n          decimalValue = Math.round(decimalValue.slice(0, -1) * 255 / 100);\n        } else decimalValue = decimalValue * 1;\n\n        if (decimalValue > 255) {\n          decimalValue = 255;\n        }\n\n        hexString = '0' + decimalValue.toString(16);\n        hexString = hexString.slice(-2);\n        ret.push(hexString);\n      }\n\n      return '#' + ret.join('');\n    }\n\n    if (nameRegex.test(color)) {\n      return color === \"transparent\" ? \"white\" : color;\n    }\n\n    console.error('Could not parse color \"' + color + '\"');\n    return color;\n  };\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\n\n\n  this.convertToUnit = function (val) {\n    // if it's just a number, then return it\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val * 1;\n    var mtch = (val + \"\").trim().match(/^(\\d*(\\.\\d+)?)(pt|px|r?em|cm)$/); // if we don't have a number with supported units, then return false\n\n    if (!mtch) return false;\n    val = mtch[1];\n\n    switch (mtch[3]) {\n      case 'px':\n        {\n          val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\n\n          break;\n        }\n\n      case 'em':\n      case 'rem':\n        {\n          val *= 12; // default font-size is 12pt\n\n          break;\n        }\n\n      case 'cm':\n        {\n          val = Math.round(val * 28.34646); // 1cm => 28.34646\n\n          break;\n        }\n    }\n\n    return val * 1;\n  };\n\n  var result = this.convertHtml(htmlText); // if we only pass a string without HTML code\n\n  if (typeof result === \"string\") result = {\n    text: result\n  }; // if images by reference\n\n  if (this.imagesByReference) {\n    result = {\n      content: result,\n      images: {}\n    };\n    this.imagesRef.forEach(function (src, i) {\n      result.images['img_ref_' + i] = src;\n    });\n  }\n\n  return result;\n}\n\nmodule.exports = function (htmlText, options) {\n  return new htmlToPdfMake(htmlText, options);\n};","map":null,"metadata":{},"sourceType":"script"}