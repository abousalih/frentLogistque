{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, ɵɵdefineInjectable } from '@angular/core';\nimport Shepherd from 'shepherd.js';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/dom.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Helper method to check if element is hidden, since we cannot use :visible without jQuery\n * @param {?} element The element to check for visibility\n * @return {?} true if element is hidden\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction elementIsHidden(element) {\n  return element.offsetWidth === 0 && element.offsetHeight === 0;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/buttons.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a button of the specified type, with the given classes and text\n *\n * @param {?} button\n * @return {?}\n */\n\n\nfunction makeButton(button) {\n  var classes = button.classes,\n      disabled = button.disabled,\n      label = button.label,\n      secondary = button.secondary,\n      type = button.type,\n      text = button.text;\n  /** @type {?} */\n\n  var builtInButtonTypes = ['back', 'cancel', 'next'];\n\n  if (!type) {\n    return button;\n  }\n\n  if (builtInButtonTypes.indexOf(type) === -1) {\n    throw new Error(\"'type' property must be one of 'back', 'cancel', or 'next'\");\n  }\n\n  return {\n    action: this[type].bind(this),\n    classes: classes,\n    disabled: disabled,\n    label: label,\n    secondary: secondary,\n    text: text\n  };\n}\n\nvar ShepherdService = /*@__PURE__*/function () {\n  var ShepherdService = /*#__PURE__*/function () {\n    function ShepherdService() {\n      _classCallCheck(this, ShepherdService);\n\n      this.confirmCancel = false;\n      this.confirmCancelMessage = null;\n      this.defaultStepOptions = {};\n      this.errorTitle = null;\n      this.isActive = false;\n      this.messageForUser = null;\n      this.modal = false;\n      this.requiredElements = [];\n      this.steps = [];\n      this.tourName = undefined;\n      this.tourObject = null;\n    }\n    /**\n     * Get the tour object and call back\n     * @return {?}\n     */\n\n\n    _createClass(ShepherdService, [{\n      key: \"back\",\n      value: function back() {\n        this.tourObject.back();\n      }\n      /**\n       * Cancel the tour\n       * @return {?}\n       */\n\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        this.tourObject.cancel();\n      }\n      /**\n       * Complete the tour\n       * @return {?}\n       */\n\n    }, {\n      key: \"complete\",\n      value: function complete() {\n        this.tourObject.complete();\n      }\n      /**\n       * Hides the current step\n       * @return {?}\n       */\n\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.tourObject.hide();\n      }\n      /**\n       * Advance the tour to the next step\n       * @return {?}\n       */\n\n    }, {\n      key: \"next\",\n      value: function next() {\n        this.tourObject.next();\n      }\n      /**\n       * Show a specific step, by passing its id\n       * @param {?} id The id of the step you want to show\n       * @return {?}\n       */\n\n    }, {\n      key: \"show\",\n      value: function show(id) {\n        this.tourObject.show(id);\n      }\n      /**\n       * Start the tour\n       * @return {?}\n       */\n\n    }, {\n      key: \"start\",\n      value: function start() {\n        this.isActive = true;\n        this.tourObject.start();\n      }\n      /**\n       * This function is called when a tour is completed or cancelled to initiate cleanup.\n       * @param {?} completeOrCancel 'complete' or 'cancel'\n       * @return {?}\n       */\n\n    }, {\n      key: \"onTourFinish\",\n      value: function onTourFinish(completeOrCancel) {\n        this.isActive = false;\n      }\n      /**\n       * Take a set of steps and create a tour object based on the current configuration\n       * @param {?} steps An array of steps\n       * @return {?}\n       */\n\n    }, {\n      key: \"addSteps\",\n      value: function addSteps(steps) {\n        var _this = this;\n\n        this._initialize();\n        /** @type {?} */\n\n\n        var tour = this.tourObject; // Return nothing if there are no steps\n\n        if (!steps || !Array.isArray(steps) || steps.length === 0) {\n          return;\n        }\n\n        if (!this.requiredElementsPresent()) {\n          tour.addStep({\n            buttons: [{\n              text: 'Exit',\n              action: tour.cancel\n            }],\n            id: 'error',\n            title: this.errorTitle,\n            text: [this.messageForUser]\n          });\n          return;\n        }\n\n        steps.forEach(\n        /**\n        * @param {?} step\n        * @return {?}\n        */\n        function (step) {\n          if (step.buttons) {\n            step.buttons = step.buttons.map(makeButton.bind(_this), _this);\n          }\n\n          tour.addStep(step);\n        });\n      }\n      /**\n       * Observes the array of requiredElements, which are the elements that must be present at the start of the tour,\n       * and determines if they exist, and are visible, if either is false, it will stop the tour from executing.\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"requiredElementsPresent\",\n      value: function requiredElementsPresent() {\n        var _this2 = this;\n\n        /** @type {?} */\n        var allElementsPresent = true;\n        /* istanbul ignore next: also can't test this due to things attached to root blowing up tests */\n\n        this.requiredElements.forEach(\n        /**\n        * @param {?} element\n        * @return {?}\n        */\n        function (element) {\n          /** @type {?} */\n          var selectedElement = document.querySelector(element.selector);\n\n          if (allElementsPresent && (!selectedElement || elementIsHidden(selectedElement))) {\n            allElementsPresent = false;\n            _this2.errorTitle = element.title;\n            _this2.messageForUser = element.message;\n          }\n        });\n        return allElementsPresent;\n      }\n      /**\n       * Initializes the tour, creates a new Shepherd.Tour. sets options, and binds events\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"_initialize\",\n      value: function _initialize() {\n        /** @type {?} */\n        var tourObject = new Shepherd.Tour({\n          confirmCancel: this.confirmCancel,\n          confirmCancelMessage: this.confirmCancelMessage,\n          defaultStepOptions: this.defaultStepOptions,\n          tourName: this.tourName,\n          useModalOverlay: this.modal\n        });\n        tourObject.on('complete', this.onTourFinish.bind(this, 'complete'));\n        tourObject.on('cancel', this.onTourFinish.bind(this, 'cancel'));\n        this.tourObject = tourObject;\n      }\n    }]);\n\n    return ShepherdService;\n  }();\n\n  ShepherdService.ɵfac = function ShepherdService_Factory(t) {\n    return new (t || ShepherdService)();\n  };\n  /** @nocollapse */\n\n\n  ShepherdService.ɵprov = ɵɵdefineInjectable({\n    factory: function ShepherdService_Factory() {\n      return new ShepherdService();\n    },\n    token: ShepherdService,\n    providedIn: \"root\"\n  });\n  return ShepherdService;\n}();\n\nif (false) {\n  /** @type {?} */\n  ShepherdService.prototype.confirmCancel;\n  /** @type {?} */\n\n  ShepherdService.prototype.confirmCancelMessage;\n  /** @type {?} */\n\n  ShepherdService.prototype.defaultStepOptions;\n  /** @type {?} */\n\n  ShepherdService.prototype.errorTitle;\n  /** @type {?} */\n\n  ShepherdService.prototype.isActive;\n  /** @type {?} */\n\n  ShepherdService.prototype.messageForUser;\n  /** @type {?} */\n\n  ShepherdService.prototype.modal;\n  /** @type {?} */\n\n  ShepherdService.prototype.requiredElements;\n  /** @type {?} */\n\n  ShepherdService.prototype.steps;\n  /** @type {?} */\n\n  ShepherdService.prototype.tourName;\n  /** @type {?} */\n\n  ShepherdService.prototype.tourObject;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-shepherd.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ShepherdService }; //# sourceMappingURL=angular-shepherd.js.map","map":null,"metadata":{},"sourceType":"module"}