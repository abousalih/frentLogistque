{"ast":null,"code":"import _inherits from \"/Users/mac/Apps/sr-manager/frontend/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mac/Apps/sr-manager/frontend/web/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mac/Apps/sr-manager/frontend/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/frontend/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\nexport var MergeMapOperator = /*#__PURE__*/function () {\n  function MergeMapOperator(project) {\n    var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n\n    _classCallCheck(this, MergeMapOperator);\n\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n\n  _createClass(MergeMapOperator, [{\n    key: \"call\",\n    value: function call(observer, source) {\n      return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n  }]);\n\n  return MergeMapOperator;\n}();\nexport var MergeMapSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(MergeMapSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(MergeMapSubscriber);\n\n  function MergeMapSubscriber(destination, project) {\n    var _this;\n\n    var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n\n    _classCallCheck(this, MergeMapSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(MergeMapSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        this._tryNext(value);\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_tryNext\",\n    value: function _tryNext(value) {\n      var result;\n      var index = this.index++;\n\n      try {\n        result = this.project(value, index);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.active++;\n\n      this._innerSub(result, value, index);\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish, value, index) {\n      var innerSubscriber = new InnerSubscriber(this, value, index);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);\n\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n\n      if (this.active === 0 && this.buffer.length === 0) {\n        this.destination.complete();\n      }\n\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      var buffer = this.buffer;\n      this.remove(innerSub);\n      this.active--;\n\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        this.destination.complete();\n      }\n    }\n  }]);\n\n  return MergeMapSubscriber;\n}(OuterSubscriber);\nexport var flatMap = mergeMap; //# sourceMappingURL=mergeMap.js.map","map":{"version":3,"sources":["/Users/mac/Apps/sr-manager/frontend/web/node_modules/rxjs/_esm2015/internal/operators/mergeMap.js"],"names":["subscribeToResult","OuterSubscriber","InnerSubscriber","map","from","mergeMap","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","pipe","a","i","b","ii","lift","MergeMapOperator","observer","subscribe","MergeMapSubscriber","destination","hasCompleted","buffer","active","index","value","_tryNext","push","result","err","error","_innerSub","ish","innerSubscriber","add","innerSubscription","undefined","length","complete","unsubscribe","outerValue","innerValue","outerIndex","innerIndex","innerSub","next","remove","_next","shift","flatMap"],"mappings":";;;;AAAA,SAAQA,iBAAR,QAAgC,2BAAhC;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,oBAAnB;AAEA,OAAO,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,cAA3B,EAAkF;AAAA,MAAvCC,UAAuC,uEAA1BC,MAAM,CAACC,iBAAmB;;AACrF,MAAI,OAAOH,cAAP,KAA0B,UAA9B,EAA0C;AACtC,WAAO,UAACI,MAAD;AAAA,aAAYA,MAAM,CAACC,IAAP,CAAYP,QAAQ,CAAC,UAACQ,CAAD,EAAIC,CAAJ;AAAA,eAAUV,IAAI,CAACE,OAAO,CAACO,CAAD,EAAIC,CAAJ,CAAR,CAAJ,CAAoBF,IAApB,CAAyBT,GAAG,CAAC,UAACY,CAAD,EAAIC,EAAJ;AAAA,iBAAWT,cAAc,CAACM,CAAD,EAAIE,CAAJ,EAAOD,CAAP,EAAUE,EAAV,CAAzB;AAAA,SAAD,CAA5B,CAAV;AAAA,OAAD,EAAkFR,UAAlF,CAApB,CAAZ;AAAA,KAAP;AACH,GAFD,MAEO,IAAI,OAAOD,cAAP,KAA0B,QAA9B,EAAwC;AAC3CC,IAAAA,UAAU,GAAGD,cAAb;AACH;;AACD,SAAO,UAACI,MAAD;AAAA,WAAYA,MAAM,CAACM,IAAP,CAAY,IAAIC,gBAAJ,CAAqBZ,OAArB,EAA8BE,UAA9B,CAAZ,CAAZ;AAAA,GAAP;AACH;AAED,WAAaU,gBAAb;AACI,4BAAYZ,OAAZ,EAA4D;AAAA,QAAvCE,UAAuC,uEAA1BC,MAAM,CAACC,iBAAmB;;AAAA;;AACxD,SAAKJ,OAAL,GAAeA,OAAf;AACA,SAAKE,UAAL,GAAkBA,UAAlB;AACH;;AAJL;AAAA;AAAA,WAMI,cAAKW,QAAL,EAAeR,MAAf,EAAuB;AACnB,aAAOA,MAAM,CAACS,SAAP,CAAiB,IAAIC,kBAAJ,CAAuBF,QAAvB,EAAiC,KAAKb,OAAtC,EAA+C,KAAKE,UAApD,CAAjB,CAAP;AACH;AARL;;AAAA;AAAA;AAWA,WAAaa,kBAAb;AAAA;;AAAA;;AACI,8BAAYC,WAAZ,EAAyBhB,OAAzB,EAAyE;AAAA;;AAAA,QAAvCE,UAAuC,uEAA1BC,MAAM,CAACC,iBAAmB;;AAAA;;AACrE,8BAAMY,WAAN;AACA,UAAKhB,OAAL,GAAeA,OAAf;AACA,UAAKE,UAAL,GAAkBA,UAAlB;AACA,UAAKe,YAAL,GAAoB,KAApB;AACA,UAAKC,MAAL,GAAc,EAAd;AACA,UAAKC,MAAL,GAAc,CAAd;AACA,UAAKC,KAAL,GAAa,CAAb;AAPqE;AAQxE;;AATL;AAAA;AAAA,WAWI,eAAMC,KAAN,EAAa;AACT,UAAI,KAAKF,MAAL,GAAc,KAAKjB,UAAvB,EAAmC;AAC/B,aAAKoB,QAAL,CAAcD,KAAd;AACH,OAFD,MAEO;AACH,aAAKH,MAAL,CAAYK,IAAZ,CAAiBF,KAAjB;AACH;AACJ;AAjBL;AAAA;AAAA,WAmBI,kBAASA,KAAT,EAAgB;AACZ,UAAIG,MAAJ;AACA,UAAMJ,KAAK,GAAG,KAAKA,KAAL,EAAd;;AACA,UAAI;AACAI,QAAAA,MAAM,GAAG,KAAKxB,OAAL,CAAaqB,KAAb,EAAoBD,KAApB,CAAT;AACH,OAFD,CAEE,OAAOK,GAAP,EAAY;AACV,aAAKT,WAAL,CAAiBU,KAAjB,CAAuBD,GAAvB;AACA;AACH;;AACD,WAAKN,MAAL;;AACA,WAAKQ,SAAL,CAAeH,MAAf,EAAuBH,KAAvB,EAA8BD,KAA9B;AACH;AA9BL;AAAA;AAAA,WAgCI,mBAAUQ,GAAV,EAAeP,KAAf,EAAsBD,KAAtB,EAA6B;AACzB,UAAMS,eAAe,GAAG,IAAIjC,eAAJ,CAAoB,IAApB,EAA0ByB,KAA1B,EAAiCD,KAAjC,CAAxB;AACA,UAAMJ,WAAW,GAAG,KAAKA,WAAzB;AACAA,MAAAA,WAAW,CAACc,GAAZ,CAAgBD,eAAhB;AACA,UAAME,iBAAiB,GAAGrC,iBAAiB,CAAC,IAAD,EAAOkC,GAAP,EAAYI,SAAZ,EAAuBA,SAAvB,EAAkCH,eAAlC,CAA3C;;AACA,UAAIE,iBAAiB,KAAKF,eAA1B,EAA2C;AACvCb,QAAAA,WAAW,CAACc,GAAZ,CAAgBC,iBAAhB;AACH;AACJ;AAxCL;AAAA;AAAA,WA0CI,qBAAY;AACR,WAAKd,YAAL,GAAoB,IAApB;;AACA,UAAI,KAAKE,MAAL,KAAgB,CAAhB,IAAqB,KAAKD,MAAL,CAAYe,MAAZ,KAAuB,CAAhD,EAAmD;AAC/C,aAAKjB,WAAL,CAAiBkB,QAAjB;AACH;;AACD,WAAKC,WAAL;AACH;AAhDL;AAAA;AAAA,WAkDI,oBAAWC,UAAX,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqE;AACjE,WAAKxB,WAAL,CAAiByB,IAAjB,CAAsBJ,UAAtB;AACH;AApDL;AAAA;AAAA,WAsDI,wBAAeG,QAAf,EAAyB;AACrB,UAAMtB,MAAM,GAAG,KAAKA,MAApB;AACA,WAAKwB,MAAL,CAAYF,QAAZ;AACA,WAAKrB,MAAL;;AACA,UAAID,MAAM,CAACe,MAAP,GAAgB,CAApB,EAAuB;AACnB,aAAKU,KAAL,CAAWzB,MAAM,CAAC0B,KAAP,EAAX;AACH,OAFD,MAEO,IAAI,KAAKzB,MAAL,KAAgB,CAAhB,IAAqB,KAAKF,YAA9B,EAA4C;AAC/C,aAAKD,WAAL,CAAiBkB,QAAjB;AACH;AACJ;AA/DL;;AAAA;AAAA,EAAwCvC,eAAxC;AAkEA,OAAO,IAAMkD,OAAO,GAAG9C,QAAhB,C,CACP","sourcesContent":["import {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {map} from './map';\nimport {from} from '../observable/from';\n\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    } else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\n\nexport class MergeMapSubscriber extends OuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        } else {\n            this.buffer.push(value);\n        }\n    }\n\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    }\n\n    _innerSub(ish, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, value, index);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        } else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n\nexport const flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map\n"]},"metadata":{},"sourceType":"module"}