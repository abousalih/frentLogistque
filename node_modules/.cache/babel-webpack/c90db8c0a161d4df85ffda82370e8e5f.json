{"ast":null,"code":"import _get from \"/Users/mac/Apps/sr-manager/srmanager/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/mac/Apps/sr-manager/srmanager/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mac/Apps/sr-manager/srmanager/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mac/Apps/sr-manager/srmanager/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mac/Apps/sr-manager/srmanager/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Apps/sr-manager/srmanager/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nvar RetryWhenOperator = /*#__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    _classCallCheck(this, RetryWhenOperator);\n\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  _createClass(RetryWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n  }]);\n\n  return RetryWhenOperator;\n}();\n\nvar RetryWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(RetryWhenSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(RetryWhenSubscriber);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this;\n\n    _classCallCheck(this, RetryWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n\n  _createClass(RetryWhenSubscriber, [{\n    key: \"error\",\n    value: function error(err) {\n      if (!this.isStopped) {\n        var errors = this.errors;\n        var retries = this.retries;\n        var retriesSubscription = this.retriesSubscription;\n\n        if (!retries) {\n          errors = new Subject();\n\n          try {\n            var notifier = this.notifier;\n            retries = notifier(errors);\n          } catch (e) {\n            return _get(_getPrototypeOf(RetryWhenSubscriber.prototype), \"error\", this).call(this, e);\n          }\n\n          retriesSubscription = subscribeToResult(this, retries);\n        } else {\n          this.errors = null;\n          this.retriesSubscription = null;\n        }\n\n        this._unsubscribeAndRecycle();\n\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        errors.next(err);\n      }\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var errors = this.errors,\n          retriesSubscription = this.retriesSubscription;\n\n      if (errors) {\n        errors.unsubscribe();\n        this.errors = null;\n      }\n\n      if (retriesSubscription) {\n        retriesSubscription.unsubscribe();\n        this.retriesSubscription = null;\n      }\n\n      this.retries = null;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      var _unsubscribe = this._unsubscribe;\n      this._unsubscribe = null;\n\n      this._unsubscribeAndRecycle();\n\n      this._unsubscribe = _unsubscribe;\n      this.source.subscribe(this);\n    }\n  }]);\n\n  return RetryWhenSubscriber;\n}(OuterSubscriber); //# sourceMappingURL=retryWhen.js.map","map":{"version":3,"sources":["/Users/mac/Apps/sr-manager/srmanager/node_modules/rxjs/_esm2015/internal/operators/retryWhen.js"],"names":["Subject","OuterSubscriber","subscribeToResult","retryWhen","notifier","source","lift","RetryWhenOperator","subscriber","subscribe","RetryWhenSubscriber","destination","err","isStopped","errors","retries","retriesSubscription","e","_unsubscribeAndRecycle","next","unsubscribe","outerValue","innerValue","outerIndex","innerIndex","innerSub","_unsubscribe"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AACA,SAAQC,iBAAR,QAAgC,2BAAhC;AAEA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAChC,SAAO,UAACC,MAAD;AAAA,WAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBH,QAAtB,EAAgCC,MAAhC,CAAZ,CAAZ;AAAA,GAAP;AACH;;IAEKE,iB;AACF,6BAAYH,QAAZ,EAAsBC,MAAtB,EAA8B;AAAA;;AAC1B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;;;WAED,cAAKG,UAAL,EAAiBH,MAAjB,EAAyB;AACrB,aAAOA,MAAM,CAACI,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKJ,QAAzC,EAAmD,KAAKC,MAAxD,CAAjB,CAAP;AACH;;;;;;IAGCK,mB;;;;;AACF,+BAAYC,WAAZ,EAAyBP,QAAzB,EAAmCC,MAAnC,EAA2C;AAAA;;AAAA;;AACvC,8BAAMM,WAAN;AACA,UAAKP,QAAL,GAAgBA,QAAhB;AACA,UAAKC,MAAL,GAAcA,MAAd;AAHuC;AAI1C;;;;WAED,eAAMO,GAAN,EAAW;AACP,UAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,YAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,YAAIC,OAAO,GAAG,KAAKA,OAAnB;AACA,YAAIC,mBAAmB,GAAG,KAAKA,mBAA/B;;AACA,YAAI,CAACD,OAAL,EAAc;AACVD,UAAAA,MAAM,GAAG,IAAId,OAAJ,EAAT;;AACA,cAAI;AACA,gBAAOI,QAAP,GAAmB,IAAnB,CAAOA,QAAP;AACAW,YAAAA,OAAO,GAAGX,QAAQ,CAACU,MAAD,CAAlB;AACH,WAHD,CAGE,OAAOG,CAAP,EAAU;AACR,kGAAmBA,CAAnB;AACH;;AACDD,UAAAA,mBAAmB,GAAGd,iBAAiB,CAAC,IAAD,EAAOa,OAAP,CAAvC;AACH,SATD,MASO;AACH,eAAKD,MAAL,GAAc,IAAd;AACA,eAAKE,mBAAL,GAA2B,IAA3B;AACH;;AACD,aAAKE,sBAAL;;AACA,aAAKJ,MAAL,GAAcA,MAAd;AACA,aAAKC,OAAL,GAAeA,OAAf;AACA,aAAKC,mBAAL,GAA2BA,mBAA3B;AACAF,QAAAA,MAAM,CAACK,IAAP,CAAYP,GAAZ;AACH;AACJ;;;WAED,wBAAe;AACX,UAAOE,MAAP,GAAsC,IAAtC,CAAOA,MAAP;AAAA,UAAeE,mBAAf,GAAsC,IAAtC,CAAeA,mBAAf;;AACA,UAAIF,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACM,WAAP;AACA,aAAKN,MAAL,GAAc,IAAd;AACH;;AACD,UAAIE,mBAAJ,EAAyB;AACrBA,QAAAA,mBAAmB,CAACI,WAApB;AACA,aAAKJ,mBAAL,GAA2B,IAA3B;AACH;;AACD,WAAKD,OAAL,GAAe,IAAf;AACH;;;WAED,oBAAWM,UAAX,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqE;AACjE,UAAOC,YAAP,GAAuB,IAAvB,CAAOA,YAAP;AACA,WAAKA,YAAL,GAAoB,IAApB;;AACA,WAAKR,sBAAL;;AACA,WAAKQ,YAAL,GAAoBA,YAApB;AACA,WAAKrB,MAAL,CAAYI,SAAZ,CAAsB,IAAtB;AACH;;;;EApD6BR,e,GAuDlC","sourcesContent":["import {Subject} from '../Subject';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\n\nclass RetryWhenSubscriber extends OuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const {notifier} = this;\n                    retries = notifier(errors);\n                } catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = subscribeToResult(this, retries);\n            } else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n\n    _unsubscribe() {\n        const {errors, retriesSubscription} = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    }\n\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        const {_unsubscribe} = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n\n//# sourceMappingURL=retryWhen.js.map\n"]},"metadata":{},"sourceType":"module"}