{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var iterator;\n    sub.add(function () {\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n\n        var value;\n        var done;\n\n        try {\n          var result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n} //# sourceMappingURL=scheduleIterable.js.map","map":{"version":3,"sources":["/Users/mac/Apps/sr-manager/web/node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js"],"names":["Observable","Subscription","iterator","Symbol_iterator","scheduleIterable","input","scheduler","Error","subscriber","sub","add","return","schedule","closed","value","done","result","next","err","error","complete"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,eAAzB;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,QAAQ,IAAIC,eAApB,QAA0C,oBAA1C;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,SAAjC,EAA4C;AAC/C,MAAI,CAACD,KAAL,EAAY;AACR,UAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACD,SAAO,IAAIP,UAAJ,CAAe,UAAAQ,UAAU,EAAI;AAChC,QAAMC,GAAG,GAAG,IAAIR,YAAJ,EAAZ;AACA,QAAIC,QAAJ;AACAO,IAAAA,GAAG,CAACC,GAAJ,CAAQ,YAAM;AACV,UAAIR,QAAQ,IAAI,OAAOA,QAAQ,CAACS,MAAhB,KAA2B,UAA3C,EAAuD;AACnDT,QAAAA,QAAQ,CAACS,MAAT;AACH;AACJ,KAJD;AAKAF,IAAAA,GAAG,CAACC,GAAJ,CAAQJ,SAAS,CAACM,QAAV,CAAmB,YAAM;AAC7BV,MAAAA,QAAQ,GAAGG,KAAK,CAACF,eAAD,CAAL,EAAX;AACAM,MAAAA,GAAG,CAACC,GAAJ,CAAQJ,SAAS,CAACM,QAAV,CAAmB,YAAY;AACnC,YAAIJ,UAAU,CAACK,MAAf,EAAuB;AACnB;AACH;;AACD,YAAIC,KAAJ;AACA,YAAIC,IAAJ;;AACA,YAAI;AACA,cAAMC,MAAM,GAAGd,QAAQ,CAACe,IAAT,EAAf;AACAH,UAAAA,KAAK,GAAGE,MAAM,CAACF,KAAf;AACAC,UAAAA,IAAI,GAAGC,MAAM,CAACD,IAAd;AACH,SAJD,CAIE,OAAOG,GAAP,EAAY;AACVV,UAAAA,UAAU,CAACW,KAAX,CAAiBD,GAAjB;AACA;AACH;;AACD,YAAIH,IAAJ,EAAU;AACNP,UAAAA,UAAU,CAACY,QAAX;AACH,SAFD,MAEO;AACHZ,UAAAA,UAAU,CAACS,IAAX,CAAgBH,KAAhB;AACA,eAAKF,QAAL;AACH;AACJ,OApBO,CAAR;AAqBH,KAvBO,CAAR;AAwBA,WAAOH,GAAP;AACH,GAjCM,CAAP;AAkCH,C,CAED","sourcesContent":["import {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {iterator as Symbol_iterator} from '../symbol/iterator';\n\nexport function scheduleIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        let iterator;\n        sub.add(() => {\n            if (iterator && typeof iterator.return === 'function') {\n                iterator.return();\n            }\n        });\n        sub.add(scheduler.schedule(() => {\n            iterator = input[Symbol_iterator]();\n            sub.add(scheduler.schedule(function () {\n                if (subscriber.closed) {\n                    return;\n                }\n                let value;\n                let done;\n                try {\n                    const result = iterator.next();\n                    value = result.value;\n                    done = result.done;\n                } catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                } else {\n                    subscriber.next(value);\n                    this.schedule();\n                }\n            }));\n        }));\n        return sub;\n    });\n}\n\n//# sourceMappingURL=scheduleIterable.js.map\n"]},"metadata":{},"sourceType":"module"}